/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.pluggedin.ffmpeg;

public class AVFilterLink {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected AVFilterLink(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AVFilterLink obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ffmpegJNI.delete_AVFilterLink(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setSrc(SWIGTYPE_p_AVFilterContext value) {
    ffmpegJNI.AVFilterLink_src_set(swigCPtr, SWIGTYPE_p_AVFilterContext.getCPtr(value));
  }

  public SWIGTYPE_p_AVFilterContext getSrc() {
    long cPtr = ffmpegJNI.AVFilterLink_src_get(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVFilterContext(cPtr, false);
  }

  public void setSrcpad(SWIGTYPE_p_AVFilterPad value) {
    ffmpegJNI.AVFilterLink_srcpad_set(swigCPtr, SWIGTYPE_p_AVFilterPad.getCPtr(value));
  }

  public SWIGTYPE_p_AVFilterPad getSrcpad() {
    long cPtr = ffmpegJNI.AVFilterLink_srcpad_get(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVFilterPad(cPtr, false);
  }

  public void setDst(SWIGTYPE_p_AVFilterContext value) {
    ffmpegJNI.AVFilterLink_dst_set(swigCPtr, SWIGTYPE_p_AVFilterContext.getCPtr(value));
  }

  public SWIGTYPE_p_AVFilterContext getDst() {
    long cPtr = ffmpegJNI.AVFilterLink_dst_get(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVFilterContext(cPtr, false);
  }

  public void setDstpad(SWIGTYPE_p_AVFilterPad value) {
    ffmpegJNI.AVFilterLink_dstpad_set(swigCPtr, SWIGTYPE_p_AVFilterPad.getCPtr(value));
  }

  public SWIGTYPE_p_AVFilterPad getDstpad() {
    long cPtr = ffmpegJNI.AVFilterLink_dstpad_get(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVFilterPad(cPtr, false);
  }

  public void setInit_state(int value) {
    ffmpegJNI.AVFilterLink_init_state_set(swigCPtr, value);
  }

  public int getInit_state() {
    return ffmpegJNI.AVFilterLink_init_state_get(swigCPtr);
  }

  public void setType(AVMediaType value) {
    ffmpegJNI.AVFilterLink_type_set(swigCPtr, value.swigValue());
  }

  public AVMediaType getType() {
    return AVMediaType.swigToEnum(ffmpegJNI.AVFilterLink_type_get(swigCPtr));
  }

  public void setW(int value) {
    ffmpegJNI.AVFilterLink_w_set(swigCPtr, value);
  }

  public int getW() {
    return ffmpegJNI.AVFilterLink_w_get(swigCPtr);
  }

  public void setH(int value) {
    ffmpegJNI.AVFilterLink_h_set(swigCPtr, value);
  }

  public int getH() {
    return ffmpegJNI.AVFilterLink_h_get(swigCPtr);
  }

  public void setSample_aspect_ratio(SWIGTYPE_p_AVRational value) {
    ffmpegJNI.AVFilterLink_sample_aspect_ratio_set(swigCPtr, SWIGTYPE_p_AVRational.getCPtr(value));
  }

  public SWIGTYPE_p_AVRational getSample_aspect_ratio() {
    return new SWIGTYPE_p_AVRational(ffmpegJNI.AVFilterLink_sample_aspect_ratio_get(swigCPtr), true);
  }

  public void setChannel_layout(java.math.BigInteger value) {
    ffmpegJNI.AVFilterLink_channel_layout_set(swigCPtr, value);
  }

  public java.math.BigInteger getChannel_layout() {
    return ffmpegJNI.AVFilterLink_channel_layout_get(swigCPtr);
  }

  public void setSample_rate(long value) {
    ffmpegJNI.AVFilterLink_sample_rate_set(swigCPtr, value);
  }

  public long getSample_rate() {
    return ffmpegJNI.AVFilterLink_sample_rate_get(swigCPtr);
  }

  public void setPlanar(int value) {
    ffmpegJNI.AVFilterLink_planar_set(swigCPtr, value);
  }

  public int getPlanar() {
    return ffmpegJNI.AVFilterLink_planar_get(swigCPtr);
  }

  public void setFormat(int value) {
    ffmpegJNI.AVFilterLink_format_set(swigCPtr, value);
  }

  public int getFormat() {
    return ffmpegJNI.AVFilterLink_format_get(swigCPtr);
  }

  public void setIn_formats(AVFilterFormats value) {
    ffmpegJNI.AVFilterLink_in_formats_set(swigCPtr, AVFilterFormats.getCPtr(value), value);
  }

  public AVFilterFormats getIn_formats() {
    long cPtr = ffmpegJNI.AVFilterLink_in_formats_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public void setOut_formats(AVFilterFormats value) {
    ffmpegJNI.AVFilterLink_out_formats_set(swigCPtr, AVFilterFormats.getCPtr(value), value);
  }

  public AVFilterFormats getOut_formats() {
    long cPtr = ffmpegJNI.AVFilterLink_out_formats_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public void setIn_chlayouts(AVFilterFormats value) {
    ffmpegJNI.AVFilterLink_in_chlayouts_set(swigCPtr, AVFilterFormats.getCPtr(value), value);
  }

  public AVFilterFormats getIn_chlayouts() {
    long cPtr = ffmpegJNI.AVFilterLink_in_chlayouts_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public void setOut_chlayouts(AVFilterFormats value) {
    ffmpegJNI.AVFilterLink_out_chlayouts_set(swigCPtr, AVFilterFormats.getCPtr(value), value);
  }

  public AVFilterFormats getOut_chlayouts() {
    long cPtr = ffmpegJNI.AVFilterLink_out_chlayouts_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public void setIn_packing(AVFilterFormats value) {
    ffmpegJNI.AVFilterLink_in_packing_set(swigCPtr, AVFilterFormats.getCPtr(value), value);
  }

  public AVFilterFormats getIn_packing() {
    long cPtr = ffmpegJNI.AVFilterLink_in_packing_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public void setOut_packing(AVFilterFormats value) {
    ffmpegJNI.AVFilterLink_out_packing_set(swigCPtr, AVFilterFormats.getCPtr(value), value);
  }

  public AVFilterFormats getOut_packing() {
    long cPtr = ffmpegJNI.AVFilterLink_out_packing_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public void setSrc_buf(AVFilterBufferRef value) {
    ffmpegJNI.AVFilterLink_src_buf_set(swigCPtr, AVFilterBufferRef.getCPtr(value), value);
  }

  public AVFilterBufferRef getSrc_buf() {
    long cPtr = ffmpegJNI.AVFilterLink_src_buf_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public void setCur_buf(AVFilterBufferRef value) {
    ffmpegJNI.AVFilterLink_cur_buf_set(swigCPtr, AVFilterBufferRef.getCPtr(value), value);
  }

  public AVFilterBufferRef getCur_buf() {
    long cPtr = ffmpegJNI.AVFilterLink_cur_buf_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public void setOut_buf(AVFilterBufferRef value) {
    ffmpegJNI.AVFilterLink_out_buf_set(swigCPtr, AVFilterBufferRef.getCPtr(value), value);
  }

  public AVFilterBufferRef getOut_buf() {
    long cPtr = ffmpegJNI.AVFilterLink_out_buf_get(swigCPtr);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public void setTime_base(SWIGTYPE_p_AVRational value) {
    ffmpegJNI.AVFilterLink_time_base_set(swigCPtr, SWIGTYPE_p_AVRational.getCPtr(value));
  }

  public SWIGTYPE_p_AVRational getTime_base() {
    return new SWIGTYPE_p_AVRational(ffmpegJNI.AVFilterLink_time_base_get(swigCPtr), true);
  }

  public void setPool(SWIGTYPE_p_AVFilterPool value) {
    ffmpegJNI.AVFilterLink_pool_set(swigCPtr, SWIGTYPE_p_AVFilterPool.getCPtr(value));
  }

  public SWIGTYPE_p_AVFilterPool getPool() {
    long cPtr = ffmpegJNI.AVFilterLink_pool_get(swigCPtr);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVFilterPool(cPtr, false);
  }

  public AVFilterLink() {
    this(ffmpegJNI.new_AVFilterLink(), true);
  }

  public final static int AVLINK_UNINIT = 0;
  public final static int AVLINK_STARTINIT = AVLINK_UNINIT + 1;
  public final static int AVLINK_INIT = AVLINK_STARTINIT + 1;

}
