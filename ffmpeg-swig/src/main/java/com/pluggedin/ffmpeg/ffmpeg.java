/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.pluggedin.ffmpeg;

public class ffmpeg implements ffmpegConstants {
  public static int av_opt_show2(long obj, long av_log_obj, int req_flags, int rej_flags) {
    return ffmpegJNI.av_opt_show2(obj, av_log_obj, req_flags, rej_flags);
  }

  public static void av_opt_set_defaults(long s) {
    ffmpegJNI.av_opt_set_defaults(s);
  }

  public static int av_set_options_string(long ctx, byte[] opts, byte[] key_val_sep, byte[] pairs_sep) {
    return ffmpegJNI.av_set_options_string(ctx, opts, key_val_sep, pairs_sep);
  }

  public static void av_opt_free(long obj) {
    ffmpegJNI.av_opt_free(obj);
  }

  public static int av_opt_flag_is_set(long obj, byte[] field_name, byte[] flag_name) {
    return ffmpegJNI.av_opt_flag_is_set(obj, field_name, flag_name);
  }

  public static int av_opt_set_dict(long obj, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.av_opt_set_dict(obj, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int av_opt_eval_flags(long obj, AVOption o, byte[] val, SWIGTYPE_p_int flags_out) {
    return ffmpegJNI.av_opt_eval_flags(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_int.getCPtr(flags_out));
  }

  public static int av_opt_eval_int(long obj, AVOption o, byte[] val, SWIGTYPE_p_int int_out) {
    return ffmpegJNI.av_opt_eval_int(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_int.getCPtr(int_out));
  }

  public static int av_opt_eval_int64(long obj, AVOption o, byte[] val, SWIGTYPE_p_int64_t int64_out) {
    return ffmpegJNI.av_opt_eval_int64(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_int64_t.getCPtr(int64_out));
  }

  public static int av_opt_eval_float(long obj, AVOption o, byte[] val, SWIGTYPE_p_float float_out) {
    return ffmpegJNI.av_opt_eval_float(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_float.getCPtr(float_out));
  }

  public static int av_opt_eval_double(long obj, AVOption o, byte[] val, SWIGTYPE_p_double double_out) {
    return ffmpegJNI.av_opt_eval_double(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_double.getCPtr(double_out));
  }

  public static int av_opt_eval_q(long obj, AVOption o, byte[] val, SWIGTYPE_p_AVRational q_out) {
    return ffmpegJNI.av_opt_eval_q(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_AVRational.getCPtr(q_out));
  }

  public static AVOption av_opt_find(long obj, byte[] name, byte[] unit, int opt_flags, int search_flags) {
    long cPtr = ffmpegJNI.av_opt_find(obj, name, unit, opt_flags, search_flags);
    return (cPtr == 0) ? null : new AVOption(cPtr, false);
  }

  public static AVOption av_opt_find2(long obj, byte[] name, byte[] unit, int opt_flags, int search_flags, SWIGTYPE_p_p_void target_obj) {
    long cPtr = ffmpegJNI.av_opt_find2(obj, name, unit, opt_flags, search_flags, SWIGTYPE_p_p_void.getCPtr(target_obj));
    return (cPtr == 0) ? null : new AVOption(cPtr, false);
  }

  public static AVOption av_opt_next(long obj, AVOption prev) {
    long cPtr = ffmpegJNI.av_opt_next(obj, AVOption.getCPtr(prev), prev);
    return (cPtr == 0) ? null : new AVOption(cPtr, false);
  }

  public static long av_opt_child_next(long obj, long prev) {
    return ffmpegJNI.av_opt_child_next(obj, prev);
  }

  public static SWIGTYPE_p_AVClass av_opt_child_class_next(SWIGTYPE_p_AVClass parent, SWIGTYPE_p_AVClass prev) {
    long cPtr = ffmpegJNI.av_opt_child_class_next(SWIGTYPE_p_AVClass.getCPtr(parent), SWIGTYPE_p_AVClass.getCPtr(prev));
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVClass(cPtr, false);
  }

  public static int av_opt_set(long obj, byte[] name, byte[] val, int search_flags) {
    return ffmpegJNI.av_opt_set(obj, name, val, search_flags);
  }

  public static int av_opt_set_int(long obj, byte[] name, SWIGTYPE_p_int64_t val, int search_flags) {
    return ffmpegJNI.av_opt_set_int(obj, name, SWIGTYPE_p_int64_t.getCPtr(val), search_flags);
  }

  public static int av_opt_set_double(long obj, byte[] name, double val, int search_flags) {
    return ffmpegJNI.av_opt_set_double(obj, name, val, search_flags);
  }

  public static int av_opt_set_q(long obj, byte[] name, SWIGTYPE_p_AVRational val, int search_flags) {
    return ffmpegJNI.av_opt_set_q(obj, name, SWIGTYPE_p_AVRational.getCPtr(val), search_flags);
  }

  public static int av_opt_get(long obj, byte[] name, int search_flags, SWIGTYPE_p_p_uint8_t out_val) {
    return ffmpegJNI.av_opt_get(obj, name, search_flags, SWIGTYPE_p_p_uint8_t.getCPtr(out_val));
  }

  public static int av_opt_get_int(long obj, byte[] name, int search_flags, SWIGTYPE_p_int64_t out_val) {
    return ffmpegJNI.av_opt_get_int(obj, name, search_flags, SWIGTYPE_p_int64_t.getCPtr(out_val));
  }

  public static int av_opt_get_double(long obj, byte[] name, int search_flags, SWIGTYPE_p_double out_val) {
    return ffmpegJNI.av_opt_get_double(obj, name, search_flags, SWIGTYPE_p_double.getCPtr(out_val));
  }

  public static int av_opt_get_q(long obj, byte[] name, int search_flags, SWIGTYPE_p_AVRational out_val) {
    return ffmpegJNI.av_opt_get_q(obj, name, search_flags, SWIGTYPE_p_AVRational.getCPtr(out_val));
  }

  public static long av_opt_ptr(SWIGTYPE_p_AVClass avclass, long obj, byte[] name) {
    return ffmpegJNI.av_opt_ptr(SWIGTYPE_p_AVClass.getCPtr(avclass), obj, name);
  }

  public static long av_malloc(long size) {
    return ffmpegJNI.av_malloc(size);
  }

  public static long av_realloc(long ptr, long size) {
    return ffmpegJNI.av_realloc(ptr, size);
  }

  public static long av_realloc_f(long ptr, long nelem, long elsize) {
    return ffmpegJNI.av_realloc_f(ptr, nelem, elsize);
  }

  public static void av_free(long ptr) {
    ffmpegJNI.av_free(ptr);
  }

  public static long av_mallocz(long size) {
    return ffmpegJNI.av_mallocz(size);
  }

  public static long av_calloc(long nmemb, long size) {
    return ffmpegJNI.av_calloc(nmemb, size);
  }

  public static byte[] av_strdup(byte[] s) {
    return ffmpegJNI.av_strdup(s);
  }

  public static void av_freep(long ptr) {
    ffmpegJNI.av_freep(ptr);
  }

  public static void av_dynarray_add(long tab_ptr, SWIGTYPE_p_int nb_ptr, long elem) {
    ffmpegJNI.av_dynarray_add(tab_ptr, SWIGTYPE_p_int.getCPtr(nb_ptr), elem);
  }

  public static int av_size_mult(long a, long b, SWIGTYPE_p_size_t r) {
    return ffmpegJNI.av_size_mult(a, b, SWIGTYPE_p_size_t.getCPtr(r));
  }

  public static SWIGTYPE_p_uint8_t getFf_log2_tab() {
    long cPtr = ffmpegJNI.ff_log2_tab_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_uint8_t(cPtr, false);
  }

  public static SWIGTYPE_p_uint8_t getAv_reverse() {
    long cPtr = ffmpegJNI.av_reverse_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_uint8_t(cPtr, false);
  }

  public static int av_log2_c(long v) {
    return ffmpegJNI.av_log2_c(v);
  }

  public static int av_log2_16bit_c(long v) {
    return ffmpegJNI.av_log2_16bit_c(v);
  }

  public static int av_clip_c(int a, int amin, int amax) {
    return ffmpegJNI.av_clip_c(a, amin, amax);
  }

  public static SWIGTYPE_p_uint8_t av_clip_uint8_c(int a) {
    return new SWIGTYPE_p_uint8_t(ffmpegJNI.av_clip_uint8_c(a), true);
  }

  public static SWIGTYPE_p_int8_t av_clip_int8_c(int a) {
    return new SWIGTYPE_p_int8_t(ffmpegJNI.av_clip_int8_c(a), true);
  }

  public static SWIGTYPE_p_uint16_t av_clip_uint16_c(int a) {
    return new SWIGTYPE_p_uint16_t(ffmpegJNI.av_clip_uint16_c(a), true);
  }

  public static SWIGTYPE_p_int16_t av_clip_int16_c(int a) {
    return new SWIGTYPE_p_int16_t(ffmpegJNI.av_clip_int16_c(a), true);
  }

  public static SWIGTYPE_p_int32_t av_clipl_int32_c(SWIGTYPE_p_int64_t a) {
    return new SWIGTYPE_p_int32_t(ffmpegJNI.av_clipl_int32_c(SWIGTYPE_p_int64_t.getCPtr(a)), true);
  }

  public static long av_clip_uintp2_c(int a, int p) {
    return ffmpegJNI.av_clip_uintp2_c(a, p);
  }

  public static float av_clipf_c(float a, float amin, float amax) {
    return ffmpegJNI.av_clipf_c(a, amin, amax);
  }

  public static int av_ceil_log2_c(int x) {
    return ffmpegJNI.av_ceil_log2_c(x);
  }

  public static int av_popcount_c(SWIGTYPE_p_uint32_t x) {
    return ffmpegJNI.av_popcount_c(SWIGTYPE_p_uint32_t.getCPtr(x));
  }

  public static byte[] av_get_sample_fmt_name(AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_get_sample_fmt_name(sample_fmt.swigValue());
  }

  public static AVSampleFormat av_get_sample_fmt(byte[] name) {
    return AVSampleFormat.swigToEnum(ffmpegJNI.av_get_sample_fmt(name));
  }

  public static AVSampleFormat av_get_alt_sample_fmt(AVSampleFormat sample_fmt, int planar) {
    return AVSampleFormat.swigToEnum(ffmpegJNI.av_get_alt_sample_fmt(sample_fmt.swigValue(), planar));
  }

  public static byte[] av_get_sample_fmt_string(byte[] buf, int buf_size, AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_get_sample_fmt_string(buf, buf_size, sample_fmt.swigValue());
  }

  public static int av_get_bytes_per_sample(AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_get_bytes_per_sample(sample_fmt.swigValue());
  }

  public static int av_sample_fmt_is_planar(AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_sample_fmt_is_planar(sample_fmt.swigValue());
  }

  public static int av_samples_get_buffer_size(SWIGTYPE_p_int linesize, int nb_channels, int nb_samples, AVSampleFormat sample_fmt, int align) {
    return ffmpegJNI.av_samples_get_buffer_size(SWIGTYPE_p_int.getCPtr(linesize), nb_channels, nb_samples, sample_fmt.swigValue(), align);
  }

  public static int av_samples_fill_arrays(SWIGTYPE_p_p_uint8_t audio_data, SWIGTYPE_p_int linesize, SWIGTYPE_p_uint8_t buf, int nb_channels, int nb_samples, AVSampleFormat sample_fmt, int align) {
    return ffmpegJNI.av_samples_fill_arrays(SWIGTYPE_p_p_uint8_t.getCPtr(audio_data), SWIGTYPE_p_int.getCPtr(linesize), SWIGTYPE_p_uint8_t.getCPtr(buf), nb_channels, nb_samples, sample_fmt.swigValue(), align);
  }

  public static int av_samples_alloc(SWIGTYPE_p_p_uint8_t audio_data, SWIGTYPE_p_int linesize, int nb_channels, int nb_samples, AVSampleFormat sample_fmt, int align) {
    return ffmpegJNI.av_samples_alloc(SWIGTYPE_p_p_uint8_t.getCPtr(audio_data), SWIGTYPE_p_int.getCPtr(linesize), nb_channels, nb_samples, sample_fmt.swigValue(), align);
  }

  public static long avutil_version() {
    return ffmpegJNI.avutil_version();
  }

  public static byte[] avutil_configuration() {
    return ffmpegJNI.avutil_configuration();
  }

  public static byte[] avutil_license() {
    return ffmpegJNI.avutil_license();
  }

  public static byte[] av_get_media_type_string(AVMediaType media_type) {
    return ffmpegJNI.av_get_media_type_string(media_type.swigValue());
  }

  public static char av_get_picture_type_char(AVPictureType pict_type) {
    return ffmpegJNI.av_get_picture_type_char(pict_type.swigValue());
  }

  public static long av_x_if_null(long p, long x) {
    return ffmpegJNI.av_x_if_null(p, x);
  }

  public static long swscale_version() {
    return ffmpegJNI.swscale_version();
  }

  public static byte[] swscale_configuration() {
    return ffmpegJNI.swscale_configuration();
  }

  public static byte[] swscale_license() {
    return ffmpegJNI.swscale_license();
  }

  public static SWIGTYPE_p_int sws_getCoefficients(int colorspace) {
    long cPtr = ffmpegJNI.sws_getCoefficients(colorspace);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static int sws_isSupportedInput(PixelFormat pix_fmt) {
    return ffmpegJNI.sws_isSupportedInput(pix_fmt.swigValue());
  }

  public static int sws_isSupportedOutput(PixelFormat pix_fmt) {
    return ffmpegJNI.sws_isSupportedOutput(pix_fmt.swigValue());
  }

  public static SWIGTYPE_p_SwsContext sws_alloc_context() {
    long cPtr = ffmpegJNI.sws_alloc_context();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwsContext(cPtr, false);
  }

  public static int sws_init_context(SWIGTYPE_p_SwsContext sws_context, SwsFilter srcFilter, SwsFilter dstFilter) {
    return ffmpegJNI.sws_init_context(SWIGTYPE_p_SwsContext.getCPtr(sws_context), SwsFilter.getCPtr(srcFilter), srcFilter, SwsFilter.getCPtr(dstFilter), dstFilter);
  }

  public static void sws_freeContext(SWIGTYPE_p_SwsContext swsContext) {
    ffmpegJNI.sws_freeContext(SWIGTYPE_p_SwsContext.getCPtr(swsContext));
  }

  public static SWIGTYPE_p_SwsContext sws_getContext(int srcW, int srcH, PixelFormat srcFormat, int dstW, int dstH, PixelFormat dstFormat, int flags, SwsFilter srcFilter, SwsFilter dstFilter, SWIGTYPE_p_double param) {
    long cPtr = ffmpegJNI.sws_getContext(srcW, srcH, srcFormat.swigValue(), dstW, dstH, dstFormat.swigValue(), flags, SwsFilter.getCPtr(srcFilter), srcFilter, SwsFilter.getCPtr(dstFilter), dstFilter, SWIGTYPE_p_double.getCPtr(param));
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwsContext(cPtr, false);
  }

  public static int sws_scale(SWIGTYPE_p_SwsContext c, SWIGTYPE_p_p_uint8_t srcSlice, SWIGTYPE_p_int srcStride, int srcSliceY, int srcSliceH, SWIGTYPE_p_p_uint8_t dst, SWIGTYPE_p_int dstStride) {
    return ffmpegJNI.sws_scale(SWIGTYPE_p_SwsContext.getCPtr(c), SWIGTYPE_p_p_uint8_t.getCPtr(srcSlice), SWIGTYPE_p_int.getCPtr(srcStride), srcSliceY, srcSliceH, SWIGTYPE_p_p_uint8_t.getCPtr(dst), SWIGTYPE_p_int.getCPtr(dstStride));
  }

  public static int sws_setColorspaceDetails(SWIGTYPE_p_SwsContext c, SWIGTYPE_p_int inv_table, int srcRange, SWIGTYPE_p_int table, int dstRange, int brightness, int contrast, int saturation) {
    return ffmpegJNI.sws_setColorspaceDetails(SWIGTYPE_p_SwsContext.getCPtr(c), SWIGTYPE_p_int.getCPtr(inv_table), srcRange, SWIGTYPE_p_int.getCPtr(table), dstRange, brightness, contrast, saturation);
  }

  public static int sws_getColorspaceDetails(SWIGTYPE_p_SwsContext c, SWIGTYPE_p_p_int inv_table, SWIGTYPE_p_int srcRange, SWIGTYPE_p_p_int table, SWIGTYPE_p_int dstRange, SWIGTYPE_p_int brightness, SWIGTYPE_p_int contrast, SWIGTYPE_p_int saturation) {
    return ffmpegJNI.sws_getColorspaceDetails(SWIGTYPE_p_SwsContext.getCPtr(c), SWIGTYPE_p_p_int.getCPtr(inv_table), SWIGTYPE_p_int.getCPtr(srcRange), SWIGTYPE_p_p_int.getCPtr(table), SWIGTYPE_p_int.getCPtr(dstRange), SWIGTYPE_p_int.getCPtr(brightness), SWIGTYPE_p_int.getCPtr(contrast), SWIGTYPE_p_int.getCPtr(saturation));
  }

  public static SwsVector sws_allocVec(int length) {
    long cPtr = ffmpegJNI.sws_allocVec(length);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static SwsVector sws_getGaussianVec(double variance, double quality) {
    long cPtr = ffmpegJNI.sws_getGaussianVec(variance, quality);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static SwsVector sws_getConstVec(double c, int length) {
    long cPtr = ffmpegJNI.sws_getConstVec(c, length);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static SwsVector sws_getIdentityVec() {
    long cPtr = ffmpegJNI.sws_getIdentityVec();
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static void sws_scaleVec(SwsVector a, double scalar) {
    ffmpegJNI.sws_scaleVec(SwsVector.getCPtr(a), a, scalar);
  }

  public static void sws_normalizeVec(SwsVector a, double height) {
    ffmpegJNI.sws_normalizeVec(SwsVector.getCPtr(a), a, height);
  }

  public static void sws_convVec(SwsVector a, SwsVector b) {
    ffmpegJNI.sws_convVec(SwsVector.getCPtr(a), a, SwsVector.getCPtr(b), b);
  }

  public static void sws_addVec(SwsVector a, SwsVector b) {
    ffmpegJNI.sws_addVec(SwsVector.getCPtr(a), a, SwsVector.getCPtr(b), b);
  }

  public static void sws_subVec(SwsVector a, SwsVector b) {
    ffmpegJNI.sws_subVec(SwsVector.getCPtr(a), a, SwsVector.getCPtr(b), b);
  }

  public static void sws_shiftVec(SwsVector a, int shift) {
    ffmpegJNI.sws_shiftVec(SwsVector.getCPtr(a), a, shift);
  }

  public static SwsVector sws_cloneVec(SwsVector a) {
    long cPtr = ffmpegJNI.sws_cloneVec(SwsVector.getCPtr(a), a);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static void sws_printVec2(SwsVector a, SWIGTYPE_p_AVClass log_ctx, int log_level) {
    ffmpegJNI.sws_printVec2(SwsVector.getCPtr(a), a, SWIGTYPE_p_AVClass.getCPtr(log_ctx), log_level);
  }

  public static void sws_freeVec(SwsVector a) {
    ffmpegJNI.sws_freeVec(SwsVector.getCPtr(a), a);
  }

  public static SwsFilter sws_getDefaultFilter(float lumaGBlur, float chromaGBlur, float lumaSharpen, float chromaSharpen, float chromaHShift, float chromaVShift, int verbose) {
    long cPtr = ffmpegJNI.sws_getDefaultFilter(lumaGBlur, chromaGBlur, lumaSharpen, chromaSharpen, chromaHShift, chromaVShift, verbose);
    return (cPtr == 0) ? null : new SwsFilter(cPtr, false);
  }

  public static void sws_freeFilter(SwsFilter filter) {
    ffmpegJNI.sws_freeFilter(SwsFilter.getCPtr(filter), filter);
  }

  public static SWIGTYPE_p_SwsContext sws_getCachedContext(SWIGTYPE_p_SwsContext context, int srcW, int srcH, PixelFormat srcFormat, int dstW, int dstH, PixelFormat dstFormat, int flags, SwsFilter srcFilter, SwsFilter dstFilter, SWIGTYPE_p_double param) {
    long cPtr = ffmpegJNI.sws_getCachedContext(SWIGTYPE_p_SwsContext.getCPtr(context), srcW, srcH, srcFormat.swigValue(), dstW, dstH, dstFormat.swigValue(), flags, SwsFilter.getCPtr(srcFilter), srcFilter, SwsFilter.getCPtr(dstFilter), dstFilter, SWIGTYPE_p_double.getCPtr(param));
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwsContext(cPtr, false);
  }

  public static void sws_convertPalette8ToPacked32(SWIGTYPE_p_uint8_t src, SWIGTYPE_p_uint8_t dst, int num_pixels, SWIGTYPE_p_uint8_t palette) {
    ffmpegJNI.sws_convertPalette8ToPacked32(SWIGTYPE_p_uint8_t.getCPtr(src), SWIGTYPE_p_uint8_t.getCPtr(dst), num_pixels, SWIGTYPE_p_uint8_t.getCPtr(palette));
  }

  public static void sws_convertPalette8ToPacked24(SWIGTYPE_p_uint8_t src, SWIGTYPE_p_uint8_t dst, int num_pixels, SWIGTYPE_p_uint8_t palette) {
    ffmpegJNI.sws_convertPalette8ToPacked24(SWIGTYPE_p_uint8_t.getCPtr(src), SWIGTYPE_p_uint8_t.getCPtr(dst), num_pixels, SWIGTYPE_p_uint8_t.getCPtr(palette));
  }

  public static SWIGTYPE_p_AVClass sws_get_class() {
    long cPtr = ffmpegJNI.sws_get_class();
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVClass(cPtr, false);
  }

  public static void av_destruct_packet_nofree(AVPacket pkt) {
    ffmpegJNI.av_destruct_packet_nofree(AVPacket.getCPtr(pkt), pkt);
  }

  public static void av_destruct_packet(AVPacket pkt) {
    ffmpegJNI.av_destruct_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static void av_init_packet(AVPacket pkt) {
    ffmpegJNI.av_init_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_new_packet(AVPacket pkt, int size) {
    return ffmpegJNI.av_new_packet(AVPacket.getCPtr(pkt), pkt, size);
  }

  public static void av_shrink_packet(AVPacket pkt, int size) {
    ffmpegJNI.av_shrink_packet(AVPacket.getCPtr(pkt), pkt, size);
  }

  public static int av_grow_packet(AVPacket pkt, int grow_by) {
    return ffmpegJNI.av_grow_packet(AVPacket.getCPtr(pkt), pkt, grow_by);
  }

  public static int av_dup_packet(AVPacket pkt) {
    return ffmpegJNI.av_dup_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static void av_free_packet(AVPacket pkt) {
    ffmpegJNI.av_free_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static SWIGTYPE_p_uint8_t av_packet_new_side_data(AVPacket pkt, AVPacketSideDataType type, int size) {
    long cPtr = ffmpegJNI.av_packet_new_side_data(AVPacket.getCPtr(pkt), pkt, type.swigValue(), size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_uint8_t(cPtr, false);
  }

  public static SWIGTYPE_p_uint8_t av_packet_get_side_data(AVPacket pkt, AVPacketSideDataType type, SWIGTYPE_p_int size) {
    long cPtr = ffmpegJNI.av_packet_get_side_data(AVPacket.getCPtr(pkt), pkt, type.swigValue(), SWIGTYPE_p_int.getCPtr(size));
    return (cPtr == 0) ? null : new SWIGTYPE_p_uint8_t(cPtr, false);
  }

  public static int av_packet_merge_side_data(AVPacket pkt) {
    return ffmpegJNI.av_packet_merge_side_data(AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_packet_split_side_data(AVPacket pkt) {
    return ffmpegJNI.av_packet_split_side_data(AVPacket.getCPtr(pkt), pkt);
  }

  public static SWIGTYPE_p_ReSampleContext av_audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate, AVSampleFormat sample_fmt_out, AVSampleFormat sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff) {
    long cPtr = ffmpegJNI.av_audio_resample_init(output_channels, input_channels, output_rate, input_rate, sample_fmt_out.swigValue(), sample_fmt_in.swigValue(), filter_length, log2_phase_count, linear, cutoff);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ReSampleContext(cPtr, false);
  }

  public static int audio_resample(SWIGTYPE_p_ReSampleContext s, SWIGTYPE_p_short output, SWIGTYPE_p_short input, int nb_samples) {
    return ffmpegJNI.audio_resample(SWIGTYPE_p_ReSampleContext.getCPtr(s), SWIGTYPE_p_short.getCPtr(output), SWIGTYPE_p_short.getCPtr(input), nb_samples);
  }

  public static void audio_resample_close(SWIGTYPE_p_ReSampleContext s) {
    ffmpegJNI.audio_resample_close(SWIGTYPE_p_ReSampleContext.getCPtr(s));
  }

  public static SWIGTYPE_p_AVResampleContext av_resample_init(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff) {
    long cPtr = ffmpegJNI.av_resample_init(out_rate, in_rate, filter_length, log2_phase_count, linear, cutoff);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVResampleContext(cPtr, false);
  }

  public static int av_resample(SWIGTYPE_p_AVResampleContext c, SWIGTYPE_p_short dst, SWIGTYPE_p_short src, SWIGTYPE_p_int consumed, int src_size, int dst_size, int update_ctx) {
    return ffmpegJNI.av_resample(SWIGTYPE_p_AVResampleContext.getCPtr(c), SWIGTYPE_p_short.getCPtr(dst), SWIGTYPE_p_short.getCPtr(src), SWIGTYPE_p_int.getCPtr(consumed), src_size, dst_size, update_ctx);
  }

  public static void av_resample_compensate(SWIGTYPE_p_AVResampleContext c, int sample_delta, int compensation_distance) {
    ffmpegJNI.av_resample_compensate(SWIGTYPE_p_AVResampleContext.getCPtr(c), sample_delta, compensation_distance);
  }

  public static void av_resample_close(SWIGTYPE_p_AVResampleContext c) {
    ffmpegJNI.av_resample_close(SWIGTYPE_p_AVResampleContext.getCPtr(c));
  }

  public static int avpicture_alloc(AVPicture picture, PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_alloc(AVPicture.getCPtr(picture), picture, pix_fmt.swigValue(), width, height);
  }

  public static void avpicture_free(AVPicture picture) {
    ffmpegJNI.avpicture_free(AVPicture.getCPtr(picture), picture);
  }

  public static int avpicture_fill(AVPicture picture, SWIGTYPE_p_uint8_t ptr, PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_fill(AVPicture.getCPtr(picture), picture, SWIGTYPE_p_uint8_t.getCPtr(ptr), pix_fmt.swigValue(), width, height);
  }

  public static int avpicture_layout(AVPicture src, PixelFormat pix_fmt, int width, int height, SWIGTYPE_p_unsigned_char dest, int dest_size) {
    return ffmpegJNI.avpicture_layout(AVPicture.getCPtr(src), src, pix_fmt.swigValue(), width, height, SWIGTYPE_p_unsigned_char.getCPtr(dest), dest_size);
  }

  public static int avpicture_get_size(PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_get_size(pix_fmt.swigValue(), width, height);
  }

  public static void avcodec_get_chroma_sub_sample(PixelFormat pix_fmt, SWIGTYPE_p_int h_shift, SWIGTYPE_p_int v_shift) {
    ffmpegJNI.avcodec_get_chroma_sub_sample(pix_fmt.swigValue(), SWIGTYPE_p_int.getCPtr(h_shift), SWIGTYPE_p_int.getCPtr(v_shift));
  }

  public static byte[] avcodec_get_name(CodecID id) {
    return ffmpegJNI.avcodec_get_name(id.swigValue());
  }

  public static void avcodec_set_dimensions(AVCodecContext s, int width, int height) {
    ffmpegJNI.avcodec_set_dimensions(AVCodecContext.getCPtr(s), s, width, height);
  }

  public static long avcodec_pix_fmt_to_codec_tag(PixelFormat pix_fmt) {
    return ffmpegJNI.avcodec_pix_fmt_to_codec_tag(pix_fmt.swigValue());
  }

  public static long av_get_codec_tag_string(byte[] buf, long buf_size, long codec_tag) {
    return ffmpegJNI.av_get_codec_tag_string(buf, buf_size, codec_tag);
  }

  public static int avcodec_get_pix_fmt_loss(PixelFormat dst_pix_fmt, PixelFormat src_pix_fmt, int has_alpha) {
    return ffmpegJNI.avcodec_get_pix_fmt_loss(dst_pix_fmt.swigValue(), src_pix_fmt.swigValue(), has_alpha);
  }

  public static PixelFormat avcodec_find_best_pix_fmt(SWIGTYPE_p_int64_t pix_fmt_mask, PixelFormat src_pix_fmt, int has_alpha, SWIGTYPE_p_int loss_ptr) {
    return PixelFormat.swigToEnum(ffmpegJNI.avcodec_find_best_pix_fmt(SWIGTYPE_p_int64_t.getCPtr(pix_fmt_mask), src_pix_fmt.swigValue(), has_alpha, SWIGTYPE_p_int.getCPtr(loss_ptr)));
  }

  public static PixelFormat avcodec_find_best_pix_fmt2(PixelFormat dst_pix_fmt1, PixelFormat dst_pix_fmt2, PixelFormat src_pix_fmt, int has_alpha, SWIGTYPE_p_int loss_ptr) {
    return PixelFormat.swigToEnum(ffmpegJNI.avcodec_find_best_pix_fmt2(dst_pix_fmt1.swigValue(), dst_pix_fmt2.swigValue(), src_pix_fmt.swigValue(), has_alpha, SWIGTYPE_p_int.getCPtr(loss_ptr)));
  }

  public static int avpicture_deinterlace(AVPicture dst, AVPicture src, PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_deinterlace(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, pix_fmt.swigValue(), width, height);
  }

  public static AVCodec av_codec_next(AVCodec c) {
    long cPtr = ffmpegJNI.av_codec_next(AVCodec.getCPtr(c), c);
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static long avcodec_version() {
    return ffmpegJNI.avcodec_version();
  }

  public static byte[] avcodec_configuration() {
    return ffmpegJNI.avcodec_configuration();
  }

  public static byte[] avcodec_license() {
    return ffmpegJNI.avcodec_license();
  }

  public static void avcodec_register(AVCodec codec) {
    ffmpegJNI.avcodec_register(AVCodec.getCPtr(codec), codec);
  }

  public static AVCodec avcodec_find_encoder(CodecID id) {
    long cPtr = ffmpegJNI.avcodec_find_encoder(id.swigValue());
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static AVCodec avcodec_find_encoder_by_name(byte[] name) {
    long cPtr = ffmpegJNI.avcodec_find_encoder_by_name(name);
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static AVCodec avcodec_find_decoder(CodecID id) {
    long cPtr = ffmpegJNI.avcodec_find_decoder(id.swigValue());
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static AVCodec avcodec_find_decoder_by_name(byte[] name) {
    long cPtr = ffmpegJNI.avcodec_find_decoder_by_name(name);
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static void avcodec_string(byte[] buf, int buf_size, AVCodecContext enc, int encode) {
    ffmpegJNI.avcodec_string(buf, buf_size, AVCodecContext.getCPtr(enc), enc, encode);
  }

  public static byte[] av_get_profile_name(AVCodec codec, int profile) {
    return ffmpegJNI.av_get_profile_name(AVCodec.getCPtr(codec), codec, profile);
  }

  public static int avcodec_get_context_defaults3(AVCodecContext s, AVCodec codec) {
    return ffmpegJNI.avcodec_get_context_defaults3(AVCodecContext.getCPtr(s), s, AVCodec.getCPtr(codec), codec);
  }

  public static AVCodecContext avcodec_alloc_context3(AVCodec codec) {
    long cPtr = ffmpegJNI.avcodec_alloc_context3(AVCodec.getCPtr(codec), codec);
    return (cPtr == 0) ? null : new AVCodecContext(cPtr, false);
  }

  public static int avcodec_copy_context(AVCodecContext dest, AVCodecContext src) {
    return ffmpegJNI.avcodec_copy_context(AVCodecContext.getCPtr(dest), dest, AVCodecContext.getCPtr(src), src);
  }

  public static void avcodec_get_frame_defaults(AVFrame pic) {
    ffmpegJNI.avcodec_get_frame_defaults(AVFrame.getCPtr(pic), pic);
  }

  public static AVFrame avcodec_alloc_frame() {
    long cPtr = ffmpegJNI.avcodec_alloc_frame();
    return (cPtr == 0) ? null : new AVFrame(cPtr, false);
  }

  public static int avcodec_default_get_buffer(AVCodecContext s, AVFrame pic) {
    return ffmpegJNI.avcodec_default_get_buffer(AVCodecContext.getCPtr(s), s, AVFrame.getCPtr(pic), pic);
  }

  public static void avcodec_default_release_buffer(AVCodecContext s, AVFrame pic) {
    ffmpegJNI.avcodec_default_release_buffer(AVCodecContext.getCPtr(s), s, AVFrame.getCPtr(pic), pic);
  }

  public static int avcodec_default_reget_buffer(AVCodecContext s, AVFrame pic) {
    return ffmpegJNI.avcodec_default_reget_buffer(AVCodecContext.getCPtr(s), s, AVFrame.getCPtr(pic), pic);
  }

  public static long avcodec_get_edge_width() {
    return ffmpegJNI.avcodec_get_edge_width();
  }

  public static void avcodec_align_dimensions(AVCodecContext s, SWIGTYPE_p_int width, SWIGTYPE_p_int height) {
    ffmpegJNI.avcodec_align_dimensions(AVCodecContext.getCPtr(s), s, SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height));
  }

  public static void avcodec_align_dimensions2(AVCodecContext s, SWIGTYPE_p_int width, SWIGTYPE_p_int height, SWIGTYPE_p_int linesize_align) {
    ffmpegJNI.avcodec_align_dimensions2(AVCodecContext.getCPtr(s), s, SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height), SWIGTYPE_p_int.getCPtr(linesize_align));
  }

  public static PixelFormat avcodec_default_get_format(AVCodecContext s, SWIGTYPE_p_PixelFormat fmt) {
    return PixelFormat.swigToEnum(ffmpegJNI.avcodec_default_get_format(AVCodecContext.getCPtr(s), s, SWIGTYPE_p_PixelFormat.getCPtr(fmt)));
  }

  public static int avcodec_default_execute(AVCodecContext c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void__int func, long arg, SWIGTYPE_p_int ret, int count, int size) {
    return ffmpegJNI.avcodec_default_execute(AVCodecContext.getCPtr(c), c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void__int.getCPtr(func), arg, SWIGTYPE_p_int.getCPtr(ret), count, size);
  }

  public static int avcodec_default_execute2(AVCodecContext c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void_int_int__int func, long arg, SWIGTYPE_p_int ret, int count) {
    return ffmpegJNI.avcodec_default_execute2(AVCodecContext.getCPtr(c), c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void_int_int__int.getCPtr(func), arg, SWIGTYPE_p_int.getCPtr(ret), count);
  }

  public static int avcodec_open2(AVCodecContext avctx, AVCodec codec, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avcodec_open2(AVCodecContext.getCPtr(avctx), avctx, AVCodec.getCPtr(codec), codec, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int avcodec_decode_audio4(AVCodecContext avctx, AVFrame frame, SWIGTYPE_p_int got_frame_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_audio4(AVCodecContext.getCPtr(avctx), avctx, AVFrame.getCPtr(frame), frame, SWIGTYPE_p_int.getCPtr(got_frame_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static int avcodec_decode_video2(AVCodecContext avctx, AVFrame picture, SWIGTYPE_p_int got_picture_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_video2(AVCodecContext.getCPtr(avctx), avctx, AVFrame.getCPtr(picture), picture, SWIGTYPE_p_int.getCPtr(got_picture_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static int avcodec_decode_subtitle2(AVCodecContext avctx, AVSubtitle sub, SWIGTYPE_p_int got_sub_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_subtitle2(AVCodecContext.getCPtr(avctx), avctx, AVSubtitle.getCPtr(sub), sub, SWIGTYPE_p_int.getCPtr(got_sub_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static void avsubtitle_free(AVSubtitle sub) {
    ffmpegJNI.avsubtitle_free(AVSubtitle.getCPtr(sub), sub);
  }

  public static int avcodec_encode_audio(AVCodecContext avctx, SWIGTYPE_p_uint8_t buf, int buf_size, SWIGTYPE_p_short samples) {
    return ffmpegJNI.avcodec_encode_audio(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_uint8_t.getCPtr(buf), buf_size, SWIGTYPE_p_short.getCPtr(samples));
  }

  public static int avcodec_encode_video(AVCodecContext avctx, SWIGTYPE_p_uint8_t buf, int buf_size, AVFrame pict) {
    return ffmpegJNI.avcodec_encode_video(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_uint8_t.getCPtr(buf), buf_size, AVFrame.getCPtr(pict), pict);
  }

  public static int avcodec_encode_subtitle(AVCodecContext avctx, SWIGTYPE_p_uint8_t buf, int buf_size, AVSubtitle sub) {
    return ffmpegJNI.avcodec_encode_subtitle(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_uint8_t.getCPtr(buf), buf_size, AVSubtitle.getCPtr(sub), sub);
  }

  public static int avcodec_close(AVCodecContext avctx) {
    return ffmpegJNI.avcodec_close(AVCodecContext.getCPtr(avctx), avctx);
  }

  public static void avcodec_register_all() {
    ffmpegJNI.avcodec_register_all();
  }

  public static void avcodec_flush_buffers(AVCodecContext avctx) {
    ffmpegJNI.avcodec_flush_buffers(AVCodecContext.getCPtr(avctx), avctx);
  }

  public static void avcodec_default_free_buffers(AVCodecContext s) {
    ffmpegJNI.avcodec_default_free_buffers(AVCodecContext.getCPtr(s), s);
  }

  public static int av_get_bits_per_sample(CodecID codec_id) {
    return ffmpegJNI.av_get_bits_per_sample(codec_id.swigValue());
  }

  public static AVCodecParser av_parser_next(AVCodecParser c) {
    long cPtr = ffmpegJNI.av_parser_next(AVCodecParser.getCPtr(c), c);
    return (cPtr == 0) ? null : new AVCodecParser(cPtr, false);
  }

  public static void av_register_codec_parser(AVCodecParser parser) {
    ffmpegJNI.av_register_codec_parser(AVCodecParser.getCPtr(parser), parser);
  }

  public static AVCodecParserContext av_parser_init(int codec_id) {
    long cPtr = ffmpegJNI.av_parser_init(codec_id);
    return (cPtr == 0) ? null : new AVCodecParserContext(cPtr, false);
  }

  public static int av_parser_parse2(AVCodecParserContext s, AVCodecContext avctx, SWIGTYPE_p_p_uint8_t poutbuf, SWIGTYPE_p_int poutbuf_size, SWIGTYPE_p_uint8_t buf, int buf_size, SWIGTYPE_p_int64_t pts, SWIGTYPE_p_int64_t dts, SWIGTYPE_p_int64_t pos) {
    return ffmpegJNI.av_parser_parse2(AVCodecParserContext.getCPtr(s), s, AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_p_uint8_t.getCPtr(poutbuf), SWIGTYPE_p_int.getCPtr(poutbuf_size), SWIGTYPE_p_uint8_t.getCPtr(buf), buf_size, SWIGTYPE_p_int64_t.getCPtr(pts), SWIGTYPE_p_int64_t.getCPtr(dts), SWIGTYPE_p_int64_t.getCPtr(pos));
  }

  public static int av_parser_change(AVCodecParserContext s, AVCodecContext avctx, SWIGTYPE_p_p_uint8_t poutbuf, SWIGTYPE_p_int poutbuf_size, SWIGTYPE_p_uint8_t buf, int buf_size, int keyframe) {
    return ffmpegJNI.av_parser_change(AVCodecParserContext.getCPtr(s), s, AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_p_uint8_t.getCPtr(poutbuf), SWIGTYPE_p_int.getCPtr(poutbuf_size), SWIGTYPE_p_uint8_t.getCPtr(buf), buf_size, keyframe);
  }

  public static void av_parser_close(AVCodecParserContext s) {
    ffmpegJNI.av_parser_close(AVCodecParserContext.getCPtr(s), s);
  }

  public static void av_register_bitstream_filter(AVBitStreamFilter bsf) {
    ffmpegJNI.av_register_bitstream_filter(AVBitStreamFilter.getCPtr(bsf), bsf);
  }

  public static AVBitStreamFilterContext av_bitstream_filter_init(byte[] name) {
    long cPtr = ffmpegJNI.av_bitstream_filter_init(name);
    return (cPtr == 0) ? null : new AVBitStreamFilterContext(cPtr, false);
  }

  public static int av_bitstream_filter_filter(AVBitStreamFilterContext bsfc, AVCodecContext avctx, byte[] args, SWIGTYPE_p_p_uint8_t poutbuf, SWIGTYPE_p_int poutbuf_size, SWIGTYPE_p_uint8_t buf, int buf_size, int keyframe) {
    return ffmpegJNI.av_bitstream_filter_filter(AVBitStreamFilterContext.getCPtr(bsfc), bsfc, AVCodecContext.getCPtr(avctx), avctx, args, SWIGTYPE_p_p_uint8_t.getCPtr(poutbuf), SWIGTYPE_p_int.getCPtr(poutbuf_size), SWIGTYPE_p_uint8_t.getCPtr(buf), buf_size, keyframe);
  }

  public static void av_bitstream_filter_close(AVBitStreamFilterContext bsf) {
    ffmpegJNI.av_bitstream_filter_close(AVBitStreamFilterContext.getCPtr(bsf), bsf);
  }

  public static AVBitStreamFilter av_bitstream_filter_next(AVBitStreamFilter f) {
    long cPtr = ffmpegJNI.av_bitstream_filter_next(AVBitStreamFilter.getCPtr(f), f);
    return (cPtr == 0) ? null : new AVBitStreamFilter(cPtr, false);
  }

  public static long av_fast_realloc(long ptr, SWIGTYPE_p_unsigned_int size, long min_size) {
    return ffmpegJNI.av_fast_realloc(ptr, SWIGTYPE_p_unsigned_int.getCPtr(size), min_size);
  }

  public static void av_fast_malloc(long ptr, SWIGTYPE_p_unsigned_int size, long min_size) {
    ffmpegJNI.av_fast_malloc(ptr, SWIGTYPE_p_unsigned_int.getCPtr(size), min_size);
  }

  public static void av_picture_copy(AVPicture dst, AVPicture src, PixelFormat pix_fmt, int width, int height) {
    ffmpegJNI.av_picture_copy(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, pix_fmt.swigValue(), width, height);
  }

  public static int av_picture_crop(AVPicture dst, AVPicture src, PixelFormat pix_fmt, int top_band, int left_band) {
    return ffmpegJNI.av_picture_crop(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, pix_fmt.swigValue(), top_band, left_band);
  }

  public static int av_picture_pad(AVPicture dst, AVPicture src, int height, int width, PixelFormat pix_fmt, int padtop, int padbottom, int padleft, int padright, SWIGTYPE_p_int color) {
    return ffmpegJNI.av_picture_pad(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, height, width, pix_fmt.swigValue(), padtop, padbottom, padleft, padright, SWIGTYPE_p_int.getCPtr(color));
  }

  public static long av_xiphlacing(SWIGTYPE_p_unsigned_char s, long v) {
    return ffmpegJNI.av_xiphlacing(SWIGTYPE_p_unsigned_char.getCPtr(s), v);
  }

  public static void av_log_missing_feature(long avc, byte[] feature, int want_sample) {
    ffmpegJNI.av_log_missing_feature(avc, feature, want_sample);
  }

  public static void av_log_ask_for_sample(long avc, byte[] msg) {
    ffmpegJNI.av_log_ask_for_sample(avc, msg);
  }

  public static void av_register_hwaccel(AVHWAccel hwaccel) {
    ffmpegJNI.av_register_hwaccel(AVHWAccel.getCPtr(hwaccel), hwaccel);
  }

  public static AVHWAccel av_hwaccel_next(AVHWAccel hwaccel) {
    long cPtr = ffmpegJNI.av_hwaccel_next(AVHWAccel.getCPtr(hwaccel), hwaccel);
    return (cPtr == 0) ? null : new AVHWAccel(cPtr, false);
  }

  public static int av_lockmgr_register(SWIGTYPE_p_f_p_p_void_enum_AVLockOp__int cb) {
    return ffmpegJNI.av_lockmgr_register(SWIGTYPE_p_f_p_p_void_enum_AVLockOp__int.getCPtr(cb));
  }

  public static AVMediaType avcodec_get_type(CodecID codec_id) {
    return AVMediaType.swigToEnum(ffmpegJNI.avcodec_get_type(codec_id.swigValue()));
  }

  public static SWIGTYPE_p_AVClass avcodec_get_class() {
    long cPtr = ffmpegJNI.avcodec_get_class();
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVClass(cPtr, false);
  }

  public static SWIGTYPE_p_AVClass avcodec_get_frame_class() {
    long cPtr = ffmpegJNI.avcodec_get_frame_class();
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVClass(cPtr, false);
  }

  public static long avfilter_version() {
    return ffmpegJNI.avfilter_version();
  }

  public static byte[] avfilter_configuration() {
    return ffmpegJNI.avfilter_configuration();
  }

  public static byte[] avfilter_license() {
    return ffmpegJNI.avfilter_license();
  }

  public static void avfilter_copy_buffer_ref_props(AVFilterBufferRef dst, AVFilterBufferRef src) {
    ffmpegJNI.avfilter_copy_buffer_ref_props(AVFilterBufferRef.getCPtr(dst), dst, AVFilterBufferRef.getCPtr(src), src);
  }

  public static AVFilterBufferRef avfilter_ref_buffer(AVFilterBufferRef ref, int pmask) {
    long cPtr = ffmpegJNI.avfilter_ref_buffer(AVFilterBufferRef.getCPtr(ref), ref, pmask);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static void avfilter_unref_buffer(AVFilterBufferRef ref) {
    ffmpegJNI.avfilter_unref_buffer(AVFilterBufferRef.getCPtr(ref), ref);
  }

  public static AVFilterFormats avfilter_make_format_list(SWIGTYPE_p_int fmts) {
    long cPtr = ffmpegJNI.avfilter_make_format_list(SWIGTYPE_p_int.getCPtr(fmts));
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static AVFilterFormats avfilter_make_format64_list(SWIGTYPE_p_int64_t fmts) {
    long cPtr = ffmpegJNI.avfilter_make_format64_list(SWIGTYPE_p_int64_t.getCPtr(fmts));
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static int avfilter_add_format(SWIGTYPE_p_p_AVFilterFormats avff, SWIGTYPE_p_int64_t fmt) {
    return ffmpegJNI.avfilter_add_format(SWIGTYPE_p_p_AVFilterFormats.getCPtr(avff), SWIGTYPE_p_int64_t.getCPtr(fmt));
  }

  public static AVFilterFormats avfilter_all_formats(AVMediaType type) {
    long cPtr = ffmpegJNI.avfilter_all_formats(type.swigValue());
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static AVFilterFormats avfilter_make_all_formats(AVMediaType type) {
    long cPtr = ffmpegJNI.avfilter_make_all_formats(type.swigValue());
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static SWIGTYPE_p_int64_t getAvfilter_all_channel_layouts() {
    long cPtr = ffmpegJNI.avfilter_all_channel_layouts_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_int64_t(cPtr, false);
  }

  public static AVFilterFormats avfilter_make_all_channel_layouts() {
    long cPtr = ffmpegJNI.avfilter_make_all_channel_layouts();
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static AVFilterFormats avfilter_make_all_packing_formats() {
    long cPtr = ffmpegJNI.avfilter_make_all_packing_formats();
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static AVFilterFormats avfilter_merge_formats(AVFilterFormats a, AVFilterFormats b) {
    long cPtr = ffmpegJNI.avfilter_merge_formats(AVFilterFormats.getCPtr(a), a, AVFilterFormats.getCPtr(b), b);
    return (cPtr == 0) ? null : new AVFilterFormats(cPtr, false);
  }

  public static void avfilter_formats_ref(AVFilterFormats formats, SWIGTYPE_p_p_AVFilterFormats ref) {
    ffmpegJNI.avfilter_formats_ref(AVFilterFormats.getCPtr(formats), formats, SWIGTYPE_p_p_AVFilterFormats.getCPtr(ref));
  }

  public static void avfilter_formats_unref(SWIGTYPE_p_p_AVFilterFormats ref) {
    ffmpegJNI.avfilter_formats_unref(SWIGTYPE_p_p_AVFilterFormats.getCPtr(ref));
  }

  public static void avfilter_formats_changeref(SWIGTYPE_p_p_AVFilterFormats oldref, SWIGTYPE_p_p_AVFilterFormats newref) {
    ffmpegJNI.avfilter_formats_changeref(SWIGTYPE_p_p_AVFilterFormats.getCPtr(oldref), SWIGTYPE_p_p_AVFilterFormats.getCPtr(newref));
  }

  public static void avfilter_default_start_frame(SWIGTYPE_p_AVFilterLink link, AVFilterBufferRef picref) {
    ffmpegJNI.avfilter_default_start_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link), AVFilterBufferRef.getCPtr(picref), picref);
  }

  public static void avfilter_default_draw_slice(SWIGTYPE_p_AVFilterLink link, int y, int h, int slice_dir) {
    ffmpegJNI.avfilter_default_draw_slice(SWIGTYPE_p_AVFilterLink.getCPtr(link), y, h, slice_dir);
  }

  public static void avfilter_default_end_frame(SWIGTYPE_p_AVFilterLink link) {
    ffmpegJNI.avfilter_default_end_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link));
  }

  public static void avfilter_default_filter_samples(SWIGTYPE_p_AVFilterLink link, AVFilterBufferRef samplesref) {
    ffmpegJNI.avfilter_default_filter_samples(SWIGTYPE_p_AVFilterLink.getCPtr(link), AVFilterBufferRef.getCPtr(samplesref), samplesref);
  }

  public static AVFilterBufferRef avfilter_default_get_video_buffer(SWIGTYPE_p_AVFilterLink link, int perms, int w, int h) {
    long cPtr = ffmpegJNI.avfilter_default_get_video_buffer(SWIGTYPE_p_AVFilterLink.getCPtr(link), perms, w, h);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static AVFilterBufferRef avfilter_default_get_audio_buffer(SWIGTYPE_p_AVFilterLink link, int perms, int nb_samples) {
    long cPtr = ffmpegJNI.avfilter_default_get_audio_buffer(SWIGTYPE_p_AVFilterLink.getCPtr(link), perms, nb_samples);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static void avfilter_set_common_pixel_formats(SWIGTYPE_p_AVFilterContext ctx, AVFilterFormats formats) {
    ffmpegJNI.avfilter_set_common_pixel_formats(SWIGTYPE_p_AVFilterContext.getCPtr(ctx), AVFilterFormats.getCPtr(formats), formats);
  }

  public static void avfilter_set_common_sample_formats(SWIGTYPE_p_AVFilterContext ctx, AVFilterFormats formats) {
    ffmpegJNI.avfilter_set_common_sample_formats(SWIGTYPE_p_AVFilterContext.getCPtr(ctx), AVFilterFormats.getCPtr(formats), formats);
  }

  public static void avfilter_set_common_channel_layouts(SWIGTYPE_p_AVFilterContext ctx, AVFilterFormats formats) {
    ffmpegJNI.avfilter_set_common_channel_layouts(SWIGTYPE_p_AVFilterContext.getCPtr(ctx), AVFilterFormats.getCPtr(formats), formats);
  }

  public static void avfilter_set_common_packing_formats(SWIGTYPE_p_AVFilterContext ctx, AVFilterFormats formats) {
    ffmpegJNI.avfilter_set_common_packing_formats(SWIGTYPE_p_AVFilterContext.getCPtr(ctx), AVFilterFormats.getCPtr(formats), formats);
  }

  public static int avfilter_default_query_formats(SWIGTYPE_p_AVFilterContext ctx) {
    return ffmpegJNI.avfilter_default_query_formats(SWIGTYPE_p_AVFilterContext.getCPtr(ctx));
  }

  public static void avfilter_null_start_frame(SWIGTYPE_p_AVFilterLink link, AVFilterBufferRef picref) {
    ffmpegJNI.avfilter_null_start_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link), AVFilterBufferRef.getCPtr(picref), picref);
  }

  public static void avfilter_null_draw_slice(SWIGTYPE_p_AVFilterLink link, int y, int h, int slice_dir) {
    ffmpegJNI.avfilter_null_draw_slice(SWIGTYPE_p_AVFilterLink.getCPtr(link), y, h, slice_dir);
  }

  public static void avfilter_null_end_frame(SWIGTYPE_p_AVFilterLink link) {
    ffmpegJNI.avfilter_null_end_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link));
  }

  public static void avfilter_null_filter_samples(SWIGTYPE_p_AVFilterLink link, AVFilterBufferRef samplesref) {
    ffmpegJNI.avfilter_null_filter_samples(SWIGTYPE_p_AVFilterLink.getCPtr(link), AVFilterBufferRef.getCPtr(samplesref), samplesref);
  }

  public static AVFilterBufferRef avfilter_null_get_video_buffer(SWIGTYPE_p_AVFilterLink link, int perms, int w, int h) {
    long cPtr = ffmpegJNI.avfilter_null_get_video_buffer(SWIGTYPE_p_AVFilterLink.getCPtr(link), perms, w, h);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static AVFilterBufferRef avfilter_null_get_audio_buffer(SWIGTYPE_p_AVFilterLink link, int perms, int nb_samples) {
    long cPtr = ffmpegJNI.avfilter_null_get_audio_buffer(SWIGTYPE_p_AVFilterLink.getCPtr(link), perms, nb_samples);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static int avfilter_link(SWIGTYPE_p_AVFilterContext src, long srcpad, SWIGTYPE_p_AVFilterContext dst, long dstpad) {
    return ffmpegJNI.avfilter_link(SWIGTYPE_p_AVFilterContext.getCPtr(src), srcpad, SWIGTYPE_p_AVFilterContext.getCPtr(dst), dstpad);
  }

  public static void avfilter_link_free(SWIGTYPE_p_p_AVFilterLink link) {
    ffmpegJNI.avfilter_link_free(SWIGTYPE_p_p_AVFilterLink.getCPtr(link));
  }

  public static int avfilter_config_links(SWIGTYPE_p_AVFilterContext filter) {
    return ffmpegJNI.avfilter_config_links(SWIGTYPE_p_AVFilterContext.getCPtr(filter));
  }

  public static AVFilterBufferRef avfilter_get_video_buffer(SWIGTYPE_p_AVFilterLink link, int perms, int w, int h) {
    long cPtr = ffmpegJNI.avfilter_get_video_buffer(SWIGTYPE_p_AVFilterLink.getCPtr(link), perms, w, h);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static AVFilterBufferRef avfilter_get_video_buffer_ref_from_arrays(SWIGTYPE_p_p_uint8_t data, SWIGTYPE_p_int linesize, int perms, int w, int h, PixelFormat format) {
    long cPtr = ffmpegJNI.avfilter_get_video_buffer_ref_from_arrays(SWIGTYPE_p_p_uint8_t.getCPtr(data), SWIGTYPE_p_int.getCPtr(linesize), perms, w, h, format.swigValue());
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static AVFilterBufferRef avfilter_get_audio_buffer(SWIGTYPE_p_AVFilterLink link, int perms, int nb_samples) {
    long cPtr = ffmpegJNI.avfilter_get_audio_buffer(SWIGTYPE_p_AVFilterLink.getCPtr(link), perms, nb_samples);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static AVFilterBufferRef avfilter_get_audio_buffer_ref_from_arrays(SWIGTYPE_p_p_uint8_t data, SWIGTYPE_p_int linesize, int perms, int nb_samples, AVSampleFormat sample_fmt, SWIGTYPE_p_uint64_t channel_layout, int planar) {
    long cPtr = ffmpegJNI.avfilter_get_audio_buffer_ref_from_arrays(SWIGTYPE_p_p_uint8_t.getCPtr(data), SWIGTYPE_p_int.getCPtr(linesize), perms, nb_samples, sample_fmt.swigValue(), SWIGTYPE_p_uint64_t.getCPtr(channel_layout), planar);
    return (cPtr == 0) ? null : new AVFilterBufferRef(cPtr, false);
  }

  public static int avfilter_request_frame(SWIGTYPE_p_AVFilterLink link) {
    return ffmpegJNI.avfilter_request_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link));
  }

  public static int avfilter_poll_frame(SWIGTYPE_p_AVFilterLink link) {
    return ffmpegJNI.avfilter_poll_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link));
  }

  public static void avfilter_start_frame(SWIGTYPE_p_AVFilterLink link, AVFilterBufferRef picref) {
    ffmpegJNI.avfilter_start_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link), AVFilterBufferRef.getCPtr(picref), picref);
  }

  public static void avfilter_end_frame(SWIGTYPE_p_AVFilterLink link) {
    ffmpegJNI.avfilter_end_frame(SWIGTYPE_p_AVFilterLink.getCPtr(link));
  }

  public static void avfilter_draw_slice(SWIGTYPE_p_AVFilterLink link, int y, int h, int slice_dir) {
    ffmpegJNI.avfilter_draw_slice(SWIGTYPE_p_AVFilterLink.getCPtr(link), y, h, slice_dir);
  }

  public static int avfilter_process_command(SWIGTYPE_p_AVFilterContext filter, byte[] cmd, byte[] arg, byte[] res, int res_len, int flags) {
    return ffmpegJNI.avfilter_process_command(SWIGTYPE_p_AVFilterContext.getCPtr(filter), cmd, arg, res, res_len, flags);
  }

  public static void avfilter_filter_samples(SWIGTYPE_p_AVFilterLink link, AVFilterBufferRef samplesref) {
    ffmpegJNI.avfilter_filter_samples(SWIGTYPE_p_AVFilterLink.getCPtr(link), AVFilterBufferRef.getCPtr(samplesref), samplesref);
  }

  public static void avfilter_register_all() {
    ffmpegJNI.avfilter_register_all();
  }

  public static void avfilter_uninit() {
    ffmpegJNI.avfilter_uninit();
  }

  public static int avfilter_register(AVFilter filter) {
    return ffmpegJNI.avfilter_register(AVFilter.getCPtr(filter), filter);
  }

  public static AVFilter avfilter_get_by_name(byte[] name) {
    long cPtr = ffmpegJNI.avfilter_get_by_name(name);
    return (cPtr == 0) ? null : new AVFilter(cPtr, false);
  }

  public static SWIGTYPE_p_p_AVFilter av_filter_next(SWIGTYPE_p_p_AVFilter filter) {
    long cPtr = ffmpegJNI.av_filter_next(SWIGTYPE_p_p_AVFilter.getCPtr(filter));
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_AVFilter(cPtr, false);
  }

  public static int avfilter_open(SWIGTYPE_p_p_AVFilterContext filter_ctx, AVFilter filter, byte[] inst_name) {
    return ffmpegJNI.avfilter_open(SWIGTYPE_p_p_AVFilterContext.getCPtr(filter_ctx), AVFilter.getCPtr(filter), filter, inst_name);
  }

  public static int avfilter_init_filter(SWIGTYPE_p_AVFilterContext filter, byte[] args, long opaque) {
    return ffmpegJNI.avfilter_init_filter(SWIGTYPE_p_AVFilterContext.getCPtr(filter), args, opaque);
  }

  public static void avfilter_free(SWIGTYPE_p_AVFilterContext filter) {
    ffmpegJNI.avfilter_free(SWIGTYPE_p_AVFilterContext.getCPtr(filter));
  }

  public static int avfilter_insert_filter(SWIGTYPE_p_AVFilterLink link, SWIGTYPE_p_AVFilterContext filt, long filt_srcpad_idx, long filt_dstpad_idx) {
    return ffmpegJNI.avfilter_insert_filter(SWIGTYPE_p_AVFilterLink.getCPtr(link), SWIGTYPE_p_AVFilterContext.getCPtr(filt), filt_srcpad_idx, filt_dstpad_idx);
  }

  public static void avfilter_insert_pad(long idx, SWIGTYPE_p_unsigned_int count, long padidx_off, SWIGTYPE_p_p_AVFilterPad pads, SWIGTYPE_p_p_p_AVFilterLink links, SWIGTYPE_p_AVFilterPad newpad) {
    ffmpegJNI.avfilter_insert_pad(idx, SWIGTYPE_p_unsigned_int.getCPtr(count), padidx_off, SWIGTYPE_p_p_AVFilterPad.getCPtr(pads), SWIGTYPE_p_p_p_AVFilterLink.getCPtr(links), SWIGTYPE_p_AVFilterPad.getCPtr(newpad));
  }

  public static void avfilter_insert_inpad(SWIGTYPE_p_AVFilterContext f, long index, SWIGTYPE_p_AVFilterPad p) {
    ffmpegJNI.avfilter_insert_inpad(SWIGTYPE_p_AVFilterContext.getCPtr(f), index, SWIGTYPE_p_AVFilterPad.getCPtr(p));
  }

  public static void avfilter_insert_outpad(SWIGTYPE_p_AVFilterContext f, long index, SWIGTYPE_p_AVFilterPad p) {
    ffmpegJNI.avfilter_insert_outpad(SWIGTYPE_p_AVFilterContext.getCPtr(f), index, SWIGTYPE_p_AVFilterPad.getCPtr(p));
  }

  public static long avformat_version() {
    return ffmpegJNI.avformat_version();
  }

  public static byte[] avformat_configuration() {
    return ffmpegJNI.avformat_configuration();
  }

  public static byte[] avformat_license() {
    return ffmpegJNI.avformat_license();
  }

  public static int av_get_packet(SWIGTYPE_p_AVIOContext s, AVPacket pkt, int size) {
    return ffmpegJNI.av_get_packet(SWIGTYPE_p_AVIOContext.getCPtr(s), AVPacket.getCPtr(pkt), pkt, size);
  }

  public static int av_append_packet(SWIGTYPE_p_AVIOContext s, AVPacket pkt, int size) {
    return ffmpegJNI.av_append_packet(SWIGTYPE_p_AVIOContext.getCPtr(s), AVPacket.getCPtr(pkt), pkt, size);
  }

  public static AVInputFormat av_iformat_next(AVInputFormat f) {
    long cPtr = ffmpegJNI.av_iformat_next(AVInputFormat.getCPtr(f), f);
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVOutputFormat av_oformat_next(AVOutputFormat f) {
    long cPtr = ffmpegJNI.av_oformat_next(AVOutputFormat.getCPtr(f), f);
    return (cPtr == 0) ? null : new AVOutputFormat(cPtr, false);
  }

  public static void av_register_input_format(AVInputFormat format) {
    ffmpegJNI.av_register_input_format(AVInputFormat.getCPtr(format), format);
  }

  public static void av_register_output_format(AVOutputFormat format) {
    ffmpegJNI.av_register_output_format(AVOutputFormat.getCPtr(format), format);
  }

  public static AVOutputFormat av_guess_format(byte[] short_name, byte[] filename, byte[] mime_type) {
    long cPtr = ffmpegJNI.av_guess_format(short_name, filename, mime_type);
    return (cPtr == 0) ? null : new AVOutputFormat(cPtr, false);
  }

  public static CodecID av_guess_codec(AVOutputFormat fmt, byte[] short_name, byte[] filename, byte[] mime_type, AVMediaType type) {
    return CodecID.swigToEnum(ffmpegJNI.av_guess_codec(AVOutputFormat.getCPtr(fmt), fmt, short_name, filename, mime_type, type.swigValue()));
  }

  public static void av_hex_dump(SWIGTYPE_p_FILE f, SWIGTYPE_p_uint8_t buf, int size) {
    ffmpegJNI.av_hex_dump(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_uint8_t.getCPtr(buf), size);
  }

  public static void av_hex_dump_log(long avcl, int level, SWIGTYPE_p_uint8_t buf, int size) {
    ffmpegJNI.av_hex_dump_log(avcl, level, SWIGTYPE_p_uint8_t.getCPtr(buf), size);
  }

  public static void av_pkt_dump2(SWIGTYPE_p_FILE f, AVPacket pkt, int dump_payload, AVStream st) {
    ffmpegJNI.av_pkt_dump2(SWIGTYPE_p_FILE.getCPtr(f), AVPacket.getCPtr(pkt), pkt, dump_payload, AVStream.getCPtr(st), st);
  }

  public static void av_pkt_dump_log2(long avcl, int level, AVPacket pkt, int dump_payload, AVStream st) {
    ffmpegJNI.av_pkt_dump_log2(avcl, level, AVPacket.getCPtr(pkt), pkt, dump_payload, AVStream.getCPtr(st), st);
  }

  public static void av_register_all() {
    ffmpegJNI.av_register_all();
  }

  public static CodecID av_codec_get_id(SWIGTYPE_p_p_AVCodecTag tags, long tag) {
    return CodecID.swigToEnum(ffmpegJNI.av_codec_get_id(SWIGTYPE_p_p_AVCodecTag.getCPtr(tags), tag));
  }

  public static long av_codec_get_tag(SWIGTYPE_p_p_AVCodecTag tags, CodecID id) {
    return ffmpegJNI.av_codec_get_tag(SWIGTYPE_p_p_AVCodecTag.getCPtr(tags), id.swigValue());
  }

  public static AVFormatContext avformat_alloc_context() {
    long cPtr = ffmpegJNI.avformat_alloc_context();
    return (cPtr == 0) ? null : new AVFormatContext(cPtr, false);
  }

  public static int avformat_alloc_output_context2(SWIGTYPE_p_p_AVFormatContext ctx, AVOutputFormat oformat, byte[] format_name, byte[] filename) {
    return ffmpegJNI.avformat_alloc_output_context2(SWIGTYPE_p_p_AVFormatContext.getCPtr(ctx), AVOutputFormat.getCPtr(oformat), oformat, format_name, filename);
  }

  public static AVInputFormat av_find_input_format(byte[] short_name) {
    long cPtr = ffmpegJNI.av_find_input_format(short_name);
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVInputFormat av_probe_input_format(AVProbeData pd, int is_opened) {
    long cPtr = ffmpegJNI.av_probe_input_format(AVProbeData.getCPtr(pd), pd, is_opened);
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVInputFormat av_probe_input_format2(AVProbeData pd, int is_opened, SWIGTYPE_p_int score_max) {
    long cPtr = ffmpegJNI.av_probe_input_format2(AVProbeData.getCPtr(pd), pd, is_opened, SWIGTYPE_p_int.getCPtr(score_max));
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVInputFormat av_probe_input_format3(AVProbeData pd, int is_opened, SWIGTYPE_p_int score_ret) {
    long cPtr = ffmpegJNI.av_probe_input_format3(AVProbeData.getCPtr(pd), pd, is_opened, SWIGTYPE_p_int.getCPtr(score_ret));
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static int av_probe_input_buffer(SWIGTYPE_p_AVIOContext pb, SWIGTYPE_p_p_AVInputFormat fmt, byte[] filename, long logctx, long offset, long max_probe_size) {
    return ffmpegJNI.av_probe_input_buffer(SWIGTYPE_p_AVIOContext.getCPtr(pb), SWIGTYPE_p_p_AVInputFormat.getCPtr(fmt), filename, logctx, offset, max_probe_size);
  }

  public static int avformat_open_input(SWIGTYPE_p_p_AVFormatContext ps, byte[] filename, AVInputFormat fmt, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avformat_open_input(SWIGTYPE_p_p_AVFormatContext.getCPtr(ps), filename, AVInputFormat.getCPtr(fmt), fmt, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int av_demuxer_open(AVFormatContext ic, AVFormatParameters ap) {
    return ffmpegJNI.av_demuxer_open(AVFormatContext.getCPtr(ic), ic, AVFormatParameters.getCPtr(ap), ap);
  }

  public static int avformat_find_stream_info(AVFormatContext ic, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avformat_find_stream_info(AVFormatContext.getCPtr(ic), ic, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static AVProgram av_find_program_from_stream(AVFormatContext ic, AVProgram last, int s) {
    long cPtr = ffmpegJNI.av_find_program_from_stream(AVFormatContext.getCPtr(ic), ic, AVProgram.getCPtr(last), last, s);
    return (cPtr == 0) ? null : new AVProgram(cPtr, false);
  }

  public static int av_find_best_stream(AVFormatContext ic, AVMediaType type, int wanted_stream_nb, int related_stream, SWIGTYPE_p_p_AVCodec decoder_ret, int flags) {
    return ffmpegJNI.av_find_best_stream(AVFormatContext.getCPtr(ic), ic, type.swigValue(), wanted_stream_nb, related_stream, SWIGTYPE_p_p_AVCodec.getCPtr(decoder_ret), flags);
  }

  public static int av_read_packet(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_read_packet(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_read_frame(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_read_frame(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_seek_frame(AVFormatContext s, int stream_index, SWIGTYPE_p_int64_t timestamp, int flags) {
    return ffmpegJNI.av_seek_frame(AVFormatContext.getCPtr(s), s, stream_index, SWIGTYPE_p_int64_t.getCPtr(timestamp), flags);
  }

  public static int avformat_seek_file(AVFormatContext s, int stream_index, SWIGTYPE_p_int64_t min_ts, SWIGTYPE_p_int64_t ts, SWIGTYPE_p_int64_t max_ts, int flags) {
    return ffmpegJNI.avformat_seek_file(AVFormatContext.getCPtr(s), s, stream_index, SWIGTYPE_p_int64_t.getCPtr(min_ts), SWIGTYPE_p_int64_t.getCPtr(ts), SWIGTYPE_p_int64_t.getCPtr(max_ts), flags);
  }

  public static int av_read_play(AVFormatContext s) {
    return ffmpegJNI.av_read_play(AVFormatContext.getCPtr(s), s);
  }

  public static int av_read_pause(AVFormatContext s) {
    return ffmpegJNI.av_read_pause(AVFormatContext.getCPtr(s), s);
  }

  public static void av_close_input_stream(AVFormatContext s) {
    ffmpegJNI.av_close_input_stream(AVFormatContext.getCPtr(s), s);
  }

  public static void av_close_input_file(AVFormatContext s) {
    ffmpegJNI.av_close_input_file(AVFormatContext.getCPtr(s), s);
  }

  public static void avformat_free_context(AVFormatContext s) {
    ffmpegJNI.avformat_free_context(AVFormatContext.getCPtr(s), s);
  }

  public static AVStream avformat_new_stream(AVFormatContext s, AVCodec c) {
    long cPtr = ffmpegJNI.avformat_new_stream(AVFormatContext.getCPtr(s), s, AVCodec.getCPtr(c), c);
    return (cPtr == 0) ? null : new AVStream(cPtr, false);
  }

  public static AVProgram av_new_program(AVFormatContext s, int id) {
    long cPtr = ffmpegJNI.av_new_program(AVFormatContext.getCPtr(s), s, id);
    return (cPtr == 0) ? null : new AVProgram(cPtr, false);
  }

  public static int av_find_default_stream_index(AVFormatContext s) {
    return ffmpegJNI.av_find_default_stream_index(AVFormatContext.getCPtr(s), s);
  }

  public static int av_index_search_timestamp(AVStream st, SWIGTYPE_p_int64_t timestamp, int flags) {
    return ffmpegJNI.av_index_search_timestamp(AVStream.getCPtr(st), st, SWIGTYPE_p_int64_t.getCPtr(timestamp), flags);
  }

  public static int av_add_index_entry(AVStream st, SWIGTYPE_p_int64_t pos, SWIGTYPE_p_int64_t timestamp, int size, int distance, int flags) {
    return ffmpegJNI.av_add_index_entry(AVStream.getCPtr(st), st, SWIGTYPE_p_int64_t.getCPtr(pos), SWIGTYPE_p_int64_t.getCPtr(timestamp), size, distance, flags);
  }

  public static void av_url_split(byte[] proto, int proto_size, byte[] authorization, int authorization_size, byte[] hostname, int hostname_size, SWIGTYPE_p_int port_ptr, byte[] path, int path_size, byte[] url) {
    ffmpegJNI.av_url_split(proto, proto_size, authorization, authorization_size, hostname, hostname_size, SWIGTYPE_p_int.getCPtr(port_ptr), path, path_size, url);
  }

  public static int avformat_write_header(AVFormatContext s, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avformat_write_header(AVFormatContext.getCPtr(s), s, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int av_write_frame(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_write_frame(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_interleaved_write_frame(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_interleaved_write_frame(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_interleave_packet_per_dts(AVFormatContext s, AVPacket out, AVPacket pkt, int flush) {
    return ffmpegJNI.av_interleave_packet_per_dts(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(out), out, AVPacket.getCPtr(pkt), pkt, flush);
  }

  public static int av_write_trailer(AVFormatContext s) {
    return ffmpegJNI.av_write_trailer(AVFormatContext.getCPtr(s), s);
  }

  public static int av_get_output_timestamp(AVFormatContext s, int stream, SWIGTYPE_p_int64_t dts, SWIGTYPE_p_int64_t wall) {
    return ffmpegJNI.av_get_output_timestamp(AVFormatContext.getCPtr(s), s, stream, SWIGTYPE_p_int64_t.getCPtr(dts), SWIGTYPE_p_int64_t.getCPtr(wall));
  }

  public static void av_dump_format(AVFormatContext ic, int index, byte[] url, int is_output) {
    ffmpegJNI.av_dump_format(AVFormatContext.getCPtr(ic), ic, index, url, is_output);
  }

  public static SWIGTYPE_p_int64_t av_gettime() {
    return new SWIGTYPE_p_int64_t(ffmpegJNI.av_gettime(), true);
  }

  public static int av_get_frame_filename(byte[] buf, int buf_size, byte[] path, int number) {
    return ffmpegJNI.av_get_frame_filename(buf, buf_size, path, number);
  }

  public static int av_filename_number_test(byte[] filename) {
    return ffmpegJNI.av_filename_number_test(filename);
  }

  public static int av_sdp_create(SWIGTYPE_p_p_AVFormatContext ac, int n_files, byte[] buf, int size) {
    return ffmpegJNI.av_sdp_create(SWIGTYPE_p_p_AVFormatContext.getCPtr(ac), n_files, buf, size);
  }

  public static int av_match_ext(byte[] filename, byte[] extensions) {
    return ffmpegJNI.av_match_ext(filename, extensions);
  }

  public static int avformat_query_codec(AVOutputFormat ofmt, CodecID codec_id, int std_compliance) {
    return ffmpegJNI.avformat_query_codec(AVOutputFormat.getCPtr(ofmt), ofmt, codec_id.swigValue(), std_compliance);
  }

  public static SWIGTYPE_p_AVClass avformat_get_class() {
    long cPtr = ffmpegJNI.avformat_get_class();
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVClass(cPtr, false);
  }

  public static int avformat_network_init() {
    return ffmpegJNI.avformat_network_init();
  }

  public static int avformat_network_deinit() {
    return ffmpegJNI.avformat_network_deinit();
  }

  public static SWIGTYPE_p_SwrContext swr_alloc() {
    long cPtr = ffmpegJNI.swr_alloc();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwrContext(cPtr, false);
  }

  public static int swr_init(SWIGTYPE_p_SwrContext s) {
    return ffmpegJNI.swr_init(SWIGTYPE_p_SwrContext.getCPtr(s));
  }

  public static SWIGTYPE_p_SwrContext swr_alloc_set_opts(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_int64_t out_ch_layout, AVSampleFormat out_sample_fmt, int out_sample_rate, SWIGTYPE_p_int64_t in_ch_layout, AVSampleFormat in_sample_fmt, int in_sample_rate, int log_offset, long log_ctx) {
    long cPtr = ffmpegJNI.swr_alloc_set_opts(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_int64_t.getCPtr(out_ch_layout), out_sample_fmt.swigValue(), out_sample_rate, SWIGTYPE_p_int64_t.getCPtr(in_ch_layout), in_sample_fmt.swigValue(), in_sample_rate, log_offset, log_ctx);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwrContext(cPtr, false);
  }

  public static void swr_free(SWIGTYPE_p_p_SwrContext s) {
    ffmpegJNI.swr_free(SWIGTYPE_p_p_SwrContext.getCPtr(s));
  }

  public static int swr_convert(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_p_uint8_t out, int out_count, SWIGTYPE_p_p_uint8_t in, int in_count) {
    return ffmpegJNI.swr_convert(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_p_uint8_t.getCPtr(out), out_count, SWIGTYPE_p_p_uint8_t.getCPtr(in), in_count);
  }

  public static void swr_compensate(SWIGTYPE_p_SwrContext s, int sample_delta, int compensation_distance) {
    ffmpegJNI.swr_compensate(SWIGTYPE_p_SwrContext.getCPtr(s), sample_delta, compensation_distance);
  }

  public static int swr_set_channel_mapping(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_int channel_map) {
    return ffmpegJNI.swr_set_channel_mapping(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_int.getCPtr(channel_map));
  }

}
