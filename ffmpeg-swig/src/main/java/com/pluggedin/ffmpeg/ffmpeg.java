/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.pluggedin.ffmpeg;

public class ffmpeg implements ffmpegConstants {
  public static DecodeResult decodeAudio(AVCodecContext avctx, AVFrame picture, AVPacket avpkt) {
    long cPtr = ffmpegJNI.decodeAudio(AVCodecContext.getCPtr(avctx), avctx, AVFrame.getCPtr(picture), picture, AVPacket.getCPtr(avpkt), avpkt);
    return (cPtr == 0) ? null : new DecodeResult(cPtr, false);
  }

  public static int encodeAudio(AVCodecContext avctx, SWIGTYPE_p_unsigned_char buf, int buf_size, SWIGTYPE_p_unsigned_char samples) {
    return ffmpegJNI.encodeAudio(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, SWIGTYPE_p_unsigned_char.getCPtr(samples));
  }

  public static DecodeResult decodeVideo(AVCodecContext avctx, AVFrame picture, AVPacket avpkt) {
    long cPtr = ffmpegJNI.decodeVideo(AVCodecContext.getCPtr(avctx), avctx, AVFrame.getCPtr(picture), picture, AVPacket.getCPtr(avpkt), avpkt);
    return (cPtr == 0) ? null : new DecodeResult(cPtr, false);
  }

  public static AVStream getAVStream(SWIGTYPE_p_p_AVStream array, int pos) {
    long cPtr = ffmpegJNI.getAVStream(SWIGTYPE_p_p_AVStream.getCPtr(array), pos);
    return (cPtr == 0) ? null : new AVStream(cPtr, false);
  }

  public static AVPacket newPacket() {
    long cPtr = ffmpegJNI.newPacket();
    return (cPtr == 0) ? null : new AVPacket(cPtr, false);
  }

  public static int swr_convert_2(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_unsigned_char out_arg, int out_count, SWIGTYPE_p_unsigned_char in_arg, int in_count) {
    return ffmpegJNI.swr_convert_2(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_unsigned_char.getCPtr(out_arg), out_count, SWIGTYPE_p_unsigned_char.getCPtr(in_arg), in_count);
  }

  public static AVFormatContext init_input_formatcontext(String filename, String format_name) {
    long cPtr = ffmpegJNI.init_input_formatcontext(filename, format_name);
    return (cPtr == 0) ? null : new AVFormatContext(cPtr, false);
  }

  public static int encode_audio_frame(AVStream st, SWIGTYPE_p_unsigned_char data, AVPacket pkt, int audio_outbuf_size) {
    return ffmpegJNI.encode_audio_frame(AVStream.getCPtr(st), st, SWIGTYPE_p_unsigned_char.getCPtr(data), AVPacket.getCPtr(pkt), pkt, audio_outbuf_size);
  }

  public static int write_audio_frame(AVFormatContext oc, AVStream st, SWIGTYPE_p_unsigned_char data) {
    return ffmpegJNI.write_audio_frame(AVFormatContext.getCPtr(oc), oc, AVStream.getCPtr(st), st, SWIGTYPE_p_unsigned_char.getCPtr(data));
  }

  public static int write_video_frame(AVFormatContext oc, AVStream st, SWIGTYPE_p_unsigned_char data, int size) {
    return ffmpegJNI.write_video_frame(AVFormatContext.getCPtr(oc), oc, AVStream.getCPtr(st), st, SWIGTYPE_p_unsigned_char.getCPtr(data), size);
  }

  public static AVFormatContext init_output_context(String format_name, String filename) {
    long cPtr = ffmpegJNI.init_output_context(format_name, filename);
    return (cPtr == 0) ? null : new AVFormatContext(cPtr, false);
  }

  public static int init_avformatcontext_pb(AVFormatContext s, String url, int flags) {
    return ffmpegJNI.init_avformatcontext_pb(AVFormatContext.getCPtr(s), s, url, flags);
  }

  public static void init_log() {
    ffmpegJNI.init_log();
  }

  public static AVRational newAVRational(int numerator, int denominator) {
    long cPtr = ffmpegJNI.newAVRational(numerator, denominator);
    return (cPtr == 0) ? null : new AVRational(cPtr, false);
  }

  public static void copyBytesIn(SWIGTYPE_p_unsigned_char self, byte[] array, int length, int offset) {
    ffmpegJNI.copyBytesIn(SWIGTYPE_p_unsigned_char.getCPtr(self), array, length, offset);
  }

  public static void copyBytesOut(SWIGTYPE_p_unsigned_char self, byte[] array, int length, int offset) {
    ffmpegJNI.copyBytesOut(SWIGTYPE_p_unsigned_char.getCPtr(self), array, length, offset);
  }

  public static SWIGTYPE_p_unsigned_char getByte2d(SWIGTYPE_p_p_unsigned_char self, int index) {
    long cPtr = ffmpegJNI.getByte2d(SWIGTYPE_p_p_unsigned_char.getCPtr(self), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char getByteOffset(SWIGTYPE_p_unsigned_char self, int index) {
    long cPtr = ffmpegJNI.getByteOffset(SWIGTYPE_p_unsigned_char.getCPtr(self), index);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void setByte2d(SWIGTYPE_p_p_unsigned_char self, int index, SWIGTYPE_p_unsigned_char item) {
    ffmpegJNI.setByte2d(SWIGTYPE_p_p_unsigned_char.getCPtr(self), index, SWIGTYPE_p_unsigned_char.getCPtr(item));
  }

  public static SWIGTYPE_p_p_unsigned_char newByteArray2d(int size) {
    long cPtr = ffmpegJNI.newByteArray2d(size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_unsigned_char(cPtr, false);
  }

  public static void delByteArray2d(SWIGTYPE_p_p_unsigned_char self) {
    ffmpegJNI.delByteArray2d(SWIGTYPE_p_p_unsigned_char.getCPtr(self));
  }

  public static byte getByte(SWIGTYPE_p_unsigned_char self, int index) {
    return ffmpegJNI.getByte(SWIGTYPE_p_unsigned_char.getCPtr(self), index);
  }

  public static void setByte(SWIGTYPE_p_unsigned_char self, int index, byte item) {
    ffmpegJNI.setByte(SWIGTYPE_p_unsigned_char.getCPtr(self), index, item);
  }

  public static SWIGTYPE_p_unsigned_char newByteArray(int size) {
    long cPtr = ffmpegJNI.newByteArray(size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static void delByteArray(SWIGTYPE_p_unsigned_char self) {
    ffmpegJNI.delByteArray(SWIGTYPE_p_unsigned_char.getCPtr(self));
  }

  public static int av_opt_show2(long obj, long av_log_obj, int req_flags, int rej_flags) {
    return ffmpegJNI.av_opt_show2(obj, av_log_obj, req_flags, rej_flags);
  }

  public static void av_opt_set_defaults(long s) {
    ffmpegJNI.av_opt_set_defaults(s);
  }

  public static int av_set_options_string(long ctx, String opts, String key_val_sep, String pairs_sep) {
    return ffmpegJNI.av_set_options_string(ctx, opts, key_val_sep, pairs_sep);
  }

  public static void av_opt_free(long obj) {
    ffmpegJNI.av_opt_free(obj);
  }

  public static int av_opt_flag_is_set(long obj, String field_name, String flag_name) {
    return ffmpegJNI.av_opt_flag_is_set(obj, field_name, flag_name);
  }

  public static int av_opt_set_dict(long obj, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.av_opt_set_dict(obj, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int av_opt_eval_flags(long obj, AVOption o, String val, SWIGTYPE_p_int flags_out) {
    return ffmpegJNI.av_opt_eval_flags(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_int.getCPtr(flags_out));
  }

  public static int av_opt_eval_int(long obj, AVOption o, String val, SWIGTYPE_p_int int_out) {
    return ffmpegJNI.av_opt_eval_int(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_int.getCPtr(int_out));
  }

  public static int av_opt_eval_int64(long obj, AVOption o, String val, SWIGTYPE_p_long_long int64_out) {
    return ffmpegJNI.av_opt_eval_int64(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_long_long.getCPtr(int64_out));
  }

  public static int av_opt_eval_float(long obj, AVOption o, String val, SWIGTYPE_p_float float_out) {
    return ffmpegJNI.av_opt_eval_float(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_float.getCPtr(float_out));
  }

  public static int av_opt_eval_double(long obj, AVOption o, String val, SWIGTYPE_p_double double_out) {
    return ffmpegJNI.av_opt_eval_double(obj, AVOption.getCPtr(o), o, val, SWIGTYPE_p_double.getCPtr(double_out));
  }

  public static int av_opt_eval_q(long obj, AVOption o, String val, AVRational q_out) {
    return ffmpegJNI.av_opt_eval_q(obj, AVOption.getCPtr(o), o, val, AVRational.getCPtr(q_out), q_out);
  }

  public static AVOption av_opt_find(long obj, String name, String unit, int opt_flags, int search_flags) {
    long cPtr = ffmpegJNI.av_opt_find(obj, name, unit, opt_flags, search_flags);
    return (cPtr == 0) ? null : new AVOption(cPtr, false);
  }

  public static AVOption av_opt_find2(long obj, String name, String unit, int opt_flags, int search_flags, SWIGTYPE_p_p_void target_obj) {
    long cPtr = ffmpegJNI.av_opt_find2(obj, name, unit, opt_flags, search_flags, SWIGTYPE_p_p_void.getCPtr(target_obj));
    return (cPtr == 0) ? null : new AVOption(cPtr, false);
  }

  public static AVOption av_opt_next(long obj, AVOption prev) {
    long cPtr = ffmpegJNI.av_opt_next(obj, AVOption.getCPtr(prev), prev);
    return (cPtr == 0) ? null : new AVOption(cPtr, false);
  }

  public static long av_opt_child_next(long obj, long prev) {
    return ffmpegJNI.av_opt_child_next(obj, prev);
  }

  public static AVClass av_opt_child_class_next(AVClass parent, AVClass prev) {
    long cPtr = ffmpegJNI.av_opt_child_class_next(AVClass.getCPtr(parent), parent, AVClass.getCPtr(prev), prev);
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static int av_opt_set(long obj, String name, String val, int search_flags) {
    return ffmpegJNI.av_opt_set(obj, name, val, search_flags);
  }

  public static int av_opt_set_int(long obj, String name, long val, int search_flags) {
    return ffmpegJNI.av_opt_set_int(obj, name, val, search_flags);
  }

  public static int av_opt_set_double(long obj, String name, double val, int search_flags) {
    return ffmpegJNI.av_opt_set_double(obj, name, val, search_flags);
  }

  public static int av_opt_set_q(long obj, String name, AVRational val, int search_flags) {
    return ffmpegJNI.av_opt_set_q(obj, name, AVRational.getCPtr(val), val, search_flags);
  }

  public static int av_opt_get(long obj, String name, int search_flags, SWIGTYPE_p_p_unsigned_char out_val) {
    return ffmpegJNI.av_opt_get(obj, name, search_flags, SWIGTYPE_p_p_unsigned_char.getCPtr(out_val));
  }

  public static int av_opt_get_int(long obj, String name, int search_flags, SWIGTYPE_p_long_long out_val) {
    return ffmpegJNI.av_opt_get_int(obj, name, search_flags, SWIGTYPE_p_long_long.getCPtr(out_val));
  }

  public static int av_opt_get_double(long obj, String name, int search_flags, SWIGTYPE_p_double out_val) {
    return ffmpegJNI.av_opt_get_double(obj, name, search_flags, SWIGTYPE_p_double.getCPtr(out_val));
  }

  public static int av_opt_get_q(long obj, String name, int search_flags, AVRational out_val) {
    return ffmpegJNI.av_opt_get_q(obj, name, search_flags, AVRational.getCPtr(out_val), out_val);
  }

  public static long av_opt_ptr(AVClass avclass, long obj, String name) {
    return ffmpegJNI.av_opt_ptr(AVClass.getCPtr(avclass), avclass, obj, name);
  }

  public static long av_malloc(long size) {
    return ffmpegJNI.av_malloc(size);
  }

  public static long av_realloc(long ptr, long size) {
    return ffmpegJNI.av_realloc(ptr, size);
  }

  public static long av_realloc_f(long ptr, long nelem, long elsize) {
    return ffmpegJNI.av_realloc_f(ptr, nelem, elsize);
  }

  public static void av_free(long ptr) {
    ffmpegJNI.av_free(ptr);
  }

  public static long av_mallocz(long size) {
    return ffmpegJNI.av_mallocz(size);
  }

  public static long av_calloc(long nmemb, long size) {
    return ffmpegJNI.av_calloc(nmemb, size);
  }

  public static String av_strdup(String s) {
    return ffmpegJNI.av_strdup(s);
  }

  public static void av_freep(long ptr) {
    ffmpegJNI.av_freep(ptr);
  }

  public static void av_dynarray_add(long tab_ptr, SWIGTYPE_p_int nb_ptr, long elem) {
    ffmpegJNI.av_dynarray_add(tab_ptr, SWIGTYPE_p_int.getCPtr(nb_ptr), elem);
  }

  public static int av_size_mult(long a, long b, SWIGTYPE_p_size_t r) {
    return ffmpegJNI.av_size_mult(a, b, SWIGTYPE_p_size_t.getCPtr(r));
  }

  public static void av_max_alloc(long max) {
    ffmpegJNI.av_max_alloc(max);
  }

  public static String av_get_sample_fmt_name(AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_get_sample_fmt_name(sample_fmt.swigValue());
  }

  public static AVSampleFormat av_get_sample_fmt(String name) {
    return AVSampleFormat.swigToEnum(ffmpegJNI.av_get_sample_fmt(name));
  }

  public static AVSampleFormat av_get_alt_sample_fmt(AVSampleFormat sample_fmt, int planar) {
    return AVSampleFormat.swigToEnum(ffmpegJNI.av_get_alt_sample_fmt(sample_fmt.swigValue(), planar));
  }

  public static AVSampleFormat av_get_packed_sample_fmt(AVSampleFormat sample_fmt) {
    return AVSampleFormat.swigToEnum(ffmpegJNI.av_get_packed_sample_fmt(sample_fmt.swigValue()));
  }

  public static AVSampleFormat av_get_planar_sample_fmt(AVSampleFormat sample_fmt) {
    return AVSampleFormat.swigToEnum(ffmpegJNI.av_get_planar_sample_fmt(sample_fmt.swigValue()));
  }

  public static String av_get_sample_fmt_string(String buf, int buf_size, AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_get_sample_fmt_string(buf, buf_size, sample_fmt.swigValue());
  }

  public static int av_get_bytes_per_sample(AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_get_bytes_per_sample(sample_fmt.swigValue());
  }

  public static int av_sample_fmt_is_planar(AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_sample_fmt_is_planar(sample_fmt.swigValue());
  }

  public static int av_samples_get_buffer_size(SWIGTYPE_p_int linesize, int nb_channels, int nb_samples, AVSampleFormat sample_fmt, int align) {
    return ffmpegJNI.av_samples_get_buffer_size(SWIGTYPE_p_int.getCPtr(linesize), nb_channels, nb_samples, sample_fmt.swigValue(), align);
  }

  public static int av_samples_fill_arrays(SWIGTYPE_p_p_unsigned_char audio_data, SWIGTYPE_p_int linesize, SWIGTYPE_p_unsigned_char buf, int nb_channels, int nb_samples, AVSampleFormat sample_fmt, int align) {
    return ffmpegJNI.av_samples_fill_arrays(SWIGTYPE_p_p_unsigned_char.getCPtr(audio_data), SWIGTYPE_p_int.getCPtr(linesize), SWIGTYPE_p_unsigned_char.getCPtr(buf), nb_channels, nb_samples, sample_fmt.swigValue(), align);
  }

  public static int av_samples_alloc(SWIGTYPE_p_p_unsigned_char audio_data, SWIGTYPE_p_int linesize, int nb_channels, int nb_samples, AVSampleFormat sample_fmt, int align) {
    return ffmpegJNI.av_samples_alloc(SWIGTYPE_p_p_unsigned_char.getCPtr(audio_data), SWIGTYPE_p_int.getCPtr(linesize), nb_channels, nb_samples, sample_fmt.swigValue(), align);
  }

  public static int av_samples_copy(SWIGTYPE_p_p_unsigned_char dst, SWIGTYPE_p_p_unsigned_char src, int dst_offset, int src_offset, int nb_samples, int nb_channels, AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_samples_copy(SWIGTYPE_p_p_unsigned_char.getCPtr(dst), SWIGTYPE_p_p_unsigned_char.getCPtr(src), dst_offset, src_offset, nb_samples, nb_channels, sample_fmt.swigValue());
  }

  public static int av_samples_set_silence(SWIGTYPE_p_p_unsigned_char audio_data, int offset, int nb_samples, int nb_channels, AVSampleFormat sample_fmt) {
    return ffmpegJNI.av_samples_set_silence(SWIGTYPE_p_p_unsigned_char.getCPtr(audio_data), offset, nb_samples, nb_channels, sample_fmt.swigValue());
  }

  public static SWIGTYPE_p_unsigned_char getFf_log2_tab() {
    long cPtr = ffmpegJNI.ff_log2_tab_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static SWIGTYPE_p_unsigned_char getAv_reverse() {
    long cPtr = ffmpegJNI.av_reverse_get();
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static int av_log2_c(long v) {
    return ffmpegJNI.av_log2_c(v);
  }

  public static int av_log2_16bit_c(long v) {
    return ffmpegJNI.av_log2_16bit_c(v);
  }

  public static int av_clip_c(int a, int amin, int amax) {
    return ffmpegJNI.av_clip_c(a, amin, amax);
  }

  public static byte av_clip_uint8_c(int a) {
    return ffmpegJNI.av_clip_uint8_c(a);
  }

  public static byte av_clip_int8_c(int a) {
    return ffmpegJNI.av_clip_int8_c(a);
  }

  public static int av_clip_uint16_c(int a) {
    return ffmpegJNI.av_clip_uint16_c(a);
  }

  public static short av_clip_int16_c(int a) {
    return ffmpegJNI.av_clip_int16_c(a);
  }

  public static int av_clipl_int32_c(long a) {
    return ffmpegJNI.av_clipl_int32_c(a);
  }

  public static long av_clip_uintp2_c(int a, int p) {
    return ffmpegJNI.av_clip_uintp2_c(a, p);
  }

  public static float av_clipf_c(float a, float amin, float amax) {
    return ffmpegJNI.av_clipf_c(a, amin, amax);
  }

  public static int av_ceil_log2_c(int x) {
    return ffmpegJNI.av_ceil_log2_c(x);
  }

  public static int av_popcount_c(long x) {
    return ffmpegJNI.av_popcount_c(x);
  }

  public static int av_popcount64_c(java.math.BigInteger x) {
    return ffmpegJNI.av_popcount64_c(x);
  }

  public static int av_cmp_q(AVRational a, AVRational b) {
    return ffmpegJNI.av_cmp_q(AVRational.getCPtr(a), a, AVRational.getCPtr(b), b);
  }

  public static double av_q2d(AVRational a) {
    return ffmpegJNI.av_q2d(AVRational.getCPtr(a), a);
  }

  public static int av_reduce(SWIGTYPE_p_int dst_num, SWIGTYPE_p_int dst_den, long num, long den, long max) {
    return ffmpegJNI.av_reduce(SWIGTYPE_p_int.getCPtr(dst_num), SWIGTYPE_p_int.getCPtr(dst_den), num, den, max);
  }

  public static AVRational av_mul_q(AVRational b, AVRational c) {
    return new AVRational(ffmpegJNI.av_mul_q(AVRational.getCPtr(b), b, AVRational.getCPtr(c), c), true);
  }

  public static AVRational av_div_q(AVRational b, AVRational c) {
    return new AVRational(ffmpegJNI.av_div_q(AVRational.getCPtr(b), b, AVRational.getCPtr(c), c), true);
  }

  public static AVRational av_add_q(AVRational b, AVRational c) {
    return new AVRational(ffmpegJNI.av_add_q(AVRational.getCPtr(b), b, AVRational.getCPtr(c), c), true);
  }

  public static AVRational av_sub_q(AVRational b, AVRational c) {
    return new AVRational(ffmpegJNI.av_sub_q(AVRational.getCPtr(b), b, AVRational.getCPtr(c), c), true);
  }

  public static AVRational av_d2q(double d, int max) {
    return new AVRational(ffmpegJNI.av_d2q(d, max), true);
  }

  public static int av_nearer_q(AVRational q, AVRational q1, AVRational q2) {
    return ffmpegJNI.av_nearer_q(AVRational.getCPtr(q), q, AVRational.getCPtr(q1), q1, AVRational.getCPtr(q2), q2);
  }

  public static int av_find_nearest_q_idx(AVRational q, AVRational q_list) {
    return ffmpegJNI.av_find_nearest_q_idx(AVRational.getCPtr(q), q, AVRational.getCPtr(q_list), q_list);
  }

  public static long avutil_version() {
    return ffmpegJNI.avutil_version();
  }

  public static String avutil_configuration() {
    return ffmpegJNI.avutil_configuration();
  }

  public static String avutil_license() {
    return ffmpegJNI.avutil_license();
  }

  public static String av_get_media_type_string(AVMediaType media_type) {
    return ffmpegJNI.av_get_media_type_string(media_type.swigValue());
  }

  public static char av_get_picture_type_char(AVPictureType pict_type) {
    return ffmpegJNI.av_get_picture_type_char(pict_type.swigValue());
  }

  public static long av_x_if_null(long p, long x) {
    return ffmpegJNI.av_x_if_null(p, x);
  }

  public static void av_log(long avcl, int level, String fmt) {
    ffmpegJNI.av_log(avcl, level, fmt);
  }

  public static int av_log_get_level() {
    return ffmpegJNI.av_log_get_level();
  }

  public static void av_log_set_level(int arg0) {
    ffmpegJNI.av_log_set_level(arg0);
  }

  public static void av_log_set_callback(SWIGTYPE_p_f_p_void_int_p_q_const__char_va_list__void arg0) {
    ffmpegJNI.av_log_set_callback(SWIGTYPE_p_f_p_void_int_p_q_const__char_va_list__void.getCPtr(arg0));
  }

  public static String av_default_item_name(long ctx) {
    return ffmpegJNI.av_default_item_name(ctx);
  }

  public static void av_log_set_flags(int arg) {
    ffmpegJNI.av_log_set_flags(arg);
  }

  public static long av_gcd(long a, long b) {
    return ffmpegJNI.av_gcd(a, b);
  }

  public static long av_rescale(long a, long b, long c) {
    return ffmpegJNI.av_rescale(a, b, c);
  }

  public static long av_rescale_rnd(long a, long b, long c, AVRounding arg3) {
    return ffmpegJNI.av_rescale_rnd(a, b, c, arg3.swigValue());
  }

  public static long av_rescale_q(long a, AVRational bq, AVRational cq) {
    return ffmpegJNI.av_rescale_q(a, AVRational.getCPtr(bq), bq, AVRational.getCPtr(cq), cq);
  }

  public static long av_rescale_q_rnd(long a, AVRational bq, AVRational cq, AVRounding arg3) {
    return ffmpegJNI.av_rescale_q_rnd(a, AVRational.getCPtr(bq), bq, AVRational.getCPtr(cq), cq, arg3.swigValue());
  }

  public static int av_compare_ts(long ts_a, AVRational tb_a, long ts_b, AVRational tb_b) {
    return ffmpegJNI.av_compare_ts(ts_a, AVRational.getCPtr(tb_a), tb_a, ts_b, AVRational.getCPtr(tb_b), tb_b);
  }

  public static long av_compare_mod(java.math.BigInteger a, java.math.BigInteger b, java.math.BigInteger mod) {
    return ffmpegJNI.av_compare_mod(a, b, mod);
  }

  public static long swscale_version() {
    return ffmpegJNI.swscale_version();
  }

  public static String swscale_configuration() {
    return ffmpegJNI.swscale_configuration();
  }

  public static String swscale_license() {
    return ffmpegJNI.swscale_license();
  }

  public static SWIGTYPE_p_int sws_getCoefficients(int colorspace) {
    long cPtr = ffmpegJNI.sws_getCoefficients(colorspace);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public static int sws_isSupportedInput(PixelFormat pix_fmt) {
    return ffmpegJNI.sws_isSupportedInput(pix_fmt.swigValue());
  }

  public static int sws_isSupportedOutput(PixelFormat pix_fmt) {
    return ffmpegJNI.sws_isSupportedOutput(pix_fmt.swigValue());
  }

  public static SWIGTYPE_p_SwsContext sws_alloc_context() {
    long cPtr = ffmpegJNI.sws_alloc_context();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwsContext(cPtr, false);
  }

  public static int sws_init_context(SWIGTYPE_p_SwsContext sws_context, SwsFilter srcFilter, SwsFilter dstFilter) {
    return ffmpegJNI.sws_init_context(SWIGTYPE_p_SwsContext.getCPtr(sws_context), SwsFilter.getCPtr(srcFilter), srcFilter, SwsFilter.getCPtr(dstFilter), dstFilter);
  }

  public static void sws_freeContext(SWIGTYPE_p_SwsContext swsContext) {
    ffmpegJNI.sws_freeContext(SWIGTYPE_p_SwsContext.getCPtr(swsContext));
  }

  public static SWIGTYPE_p_SwsContext sws_getContext(int srcW, int srcH, PixelFormat srcFormat, int dstW, int dstH, PixelFormat dstFormat, int flags, SwsFilter srcFilter, SwsFilter dstFilter, SWIGTYPE_p_double param) {
    long cPtr = ffmpegJNI.sws_getContext(srcW, srcH, srcFormat.swigValue(), dstW, dstH, dstFormat.swigValue(), flags, SwsFilter.getCPtr(srcFilter), srcFilter, SwsFilter.getCPtr(dstFilter), dstFilter, SWIGTYPE_p_double.getCPtr(param));
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwsContext(cPtr, false);
  }

  public static int sws_scale(SWIGTYPE_p_SwsContext c, SWIGTYPE_p_p_unsigned_char srcSlice, SWIGTYPE_p_int srcStride, int srcSliceY, int srcSliceH, SWIGTYPE_p_p_unsigned_char dst, SWIGTYPE_p_int dstStride) {
    return ffmpegJNI.sws_scale(SWIGTYPE_p_SwsContext.getCPtr(c), SWIGTYPE_p_p_unsigned_char.getCPtr(srcSlice), SWIGTYPE_p_int.getCPtr(srcStride), srcSliceY, srcSliceH, SWIGTYPE_p_p_unsigned_char.getCPtr(dst), SWIGTYPE_p_int.getCPtr(dstStride));
  }

  public static int sws_setColorspaceDetails(SWIGTYPE_p_SwsContext c, SWIGTYPE_p_int inv_table, int srcRange, SWIGTYPE_p_int table, int dstRange, int brightness, int contrast, int saturation) {
    return ffmpegJNI.sws_setColorspaceDetails(SWIGTYPE_p_SwsContext.getCPtr(c), SWIGTYPE_p_int.getCPtr(inv_table), srcRange, SWIGTYPE_p_int.getCPtr(table), dstRange, brightness, contrast, saturation);
  }

  public static int sws_getColorspaceDetails(SWIGTYPE_p_SwsContext c, SWIGTYPE_p_p_int inv_table, SWIGTYPE_p_int srcRange, SWIGTYPE_p_p_int table, SWIGTYPE_p_int dstRange, SWIGTYPE_p_int brightness, SWIGTYPE_p_int contrast, SWIGTYPE_p_int saturation) {
    return ffmpegJNI.sws_getColorspaceDetails(SWIGTYPE_p_SwsContext.getCPtr(c), SWIGTYPE_p_p_int.getCPtr(inv_table), SWIGTYPE_p_int.getCPtr(srcRange), SWIGTYPE_p_p_int.getCPtr(table), SWIGTYPE_p_int.getCPtr(dstRange), SWIGTYPE_p_int.getCPtr(brightness), SWIGTYPE_p_int.getCPtr(contrast), SWIGTYPE_p_int.getCPtr(saturation));
  }

  public static SwsVector sws_allocVec(int length) {
    long cPtr = ffmpegJNI.sws_allocVec(length);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static SwsVector sws_getGaussianVec(double variance, double quality) {
    long cPtr = ffmpegJNI.sws_getGaussianVec(variance, quality);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static SwsVector sws_getConstVec(double c, int length) {
    long cPtr = ffmpegJNI.sws_getConstVec(c, length);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static SwsVector sws_getIdentityVec() {
    long cPtr = ffmpegJNI.sws_getIdentityVec();
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static void sws_scaleVec(SwsVector a, double scalar) {
    ffmpegJNI.sws_scaleVec(SwsVector.getCPtr(a), a, scalar);
  }

  public static void sws_normalizeVec(SwsVector a, double height) {
    ffmpegJNI.sws_normalizeVec(SwsVector.getCPtr(a), a, height);
  }

  public static void sws_convVec(SwsVector a, SwsVector b) {
    ffmpegJNI.sws_convVec(SwsVector.getCPtr(a), a, SwsVector.getCPtr(b), b);
  }

  public static void sws_addVec(SwsVector a, SwsVector b) {
    ffmpegJNI.sws_addVec(SwsVector.getCPtr(a), a, SwsVector.getCPtr(b), b);
  }

  public static void sws_subVec(SwsVector a, SwsVector b) {
    ffmpegJNI.sws_subVec(SwsVector.getCPtr(a), a, SwsVector.getCPtr(b), b);
  }

  public static void sws_shiftVec(SwsVector a, int shift) {
    ffmpegJNI.sws_shiftVec(SwsVector.getCPtr(a), a, shift);
  }

  public static SwsVector sws_cloneVec(SwsVector a) {
    long cPtr = ffmpegJNI.sws_cloneVec(SwsVector.getCPtr(a), a);
    return (cPtr == 0) ? null : new SwsVector(cPtr, false);
  }

  public static void sws_printVec2(SwsVector a, AVClass log_ctx, int log_level) {
    ffmpegJNI.sws_printVec2(SwsVector.getCPtr(a), a, AVClass.getCPtr(log_ctx), log_ctx, log_level);
  }

  public static void sws_freeVec(SwsVector a) {
    ffmpegJNI.sws_freeVec(SwsVector.getCPtr(a), a);
  }

  public static SwsFilter sws_getDefaultFilter(float lumaGBlur, float chromaGBlur, float lumaSharpen, float chromaSharpen, float chromaHShift, float chromaVShift, int verbose) {
    long cPtr = ffmpegJNI.sws_getDefaultFilter(lumaGBlur, chromaGBlur, lumaSharpen, chromaSharpen, chromaHShift, chromaVShift, verbose);
    return (cPtr == 0) ? null : new SwsFilter(cPtr, false);
  }

  public static void sws_freeFilter(SwsFilter filter) {
    ffmpegJNI.sws_freeFilter(SwsFilter.getCPtr(filter), filter);
  }

  public static SWIGTYPE_p_SwsContext sws_getCachedContext(SWIGTYPE_p_SwsContext context, int srcW, int srcH, PixelFormat srcFormat, int dstW, int dstH, PixelFormat dstFormat, int flags, SwsFilter srcFilter, SwsFilter dstFilter, SWIGTYPE_p_double param) {
    long cPtr = ffmpegJNI.sws_getCachedContext(SWIGTYPE_p_SwsContext.getCPtr(context), srcW, srcH, srcFormat.swigValue(), dstW, dstH, dstFormat.swigValue(), flags, SwsFilter.getCPtr(srcFilter), srcFilter, SwsFilter.getCPtr(dstFilter), dstFilter, SWIGTYPE_p_double.getCPtr(param));
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwsContext(cPtr, false);
  }

  public static void sws_convertPalette8ToPacked32(SWIGTYPE_p_unsigned_char src, SWIGTYPE_p_unsigned_char dst, int num_pixels, SWIGTYPE_p_unsigned_char palette) {
    ffmpegJNI.sws_convertPalette8ToPacked32(SWIGTYPE_p_unsigned_char.getCPtr(src), SWIGTYPE_p_unsigned_char.getCPtr(dst), num_pixels, SWIGTYPE_p_unsigned_char.getCPtr(palette));
  }

  public static void sws_convertPalette8ToPacked24(SWIGTYPE_p_unsigned_char src, SWIGTYPE_p_unsigned_char dst, int num_pixels, SWIGTYPE_p_unsigned_char palette) {
    ffmpegJNI.sws_convertPalette8ToPacked24(SWIGTYPE_p_unsigned_char.getCPtr(src), SWIGTYPE_p_unsigned_char.getCPtr(dst), num_pixels, SWIGTYPE_p_unsigned_char.getCPtr(palette));
  }

  public static AVClass sws_get_class() {
    long cPtr = ffmpegJNI.sws_get_class();
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static long av_frame_get_best_effort_timestamp(AVFrame frame) {
    return ffmpegJNI.av_frame_get_best_effort_timestamp(AVFrame.getCPtr(frame), frame);
  }

  public static long av_frame_get_pkt_pos(AVFrame frame) {
    return ffmpegJNI.av_frame_get_pkt_pos(AVFrame.getCPtr(frame), frame);
  }

  public static long av_frame_get_channel_layout(AVFrame frame) {
    return ffmpegJNI.av_frame_get_channel_layout(AVFrame.getCPtr(frame), frame);
  }

  public static int av_frame_get_sample_rate(AVFrame frame) {
    return ffmpegJNI.av_frame_get_sample_rate(AVFrame.getCPtr(frame), frame);
  }

  public static void av_frame_set_best_effort_timestamp(AVFrame frame, long val) {
    ffmpegJNI.av_frame_set_best_effort_timestamp(AVFrame.getCPtr(frame), frame, val);
  }

  public static void av_frame_set_pkt_pos(AVFrame frame, long val) {
    ffmpegJNI.av_frame_set_pkt_pos(AVFrame.getCPtr(frame), frame, val);
  }

  public static void av_frame_set_channel_layout(AVFrame frame, long val) {
    ffmpegJNI.av_frame_set_channel_layout(AVFrame.getCPtr(frame), frame, val);
  }

  public static void av_frame_set_sample_rate(AVFrame frame, int val) {
    ffmpegJNI.av_frame_set_sample_rate(AVFrame.getCPtr(frame), frame, val);
  }

  public static AVCodec av_codec_next(AVCodec c) {
    long cPtr = ffmpegJNI.av_codec_next(AVCodec.getCPtr(c), c);
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static long avcodec_version() {
    return ffmpegJNI.avcodec_version();
  }

  public static String avcodec_configuration() {
    return ffmpegJNI.avcodec_configuration();
  }

  public static String avcodec_license() {
    return ffmpegJNI.avcodec_license();
  }

  public static void avcodec_register(AVCodec codec) {
    ffmpegJNI.avcodec_register(AVCodec.getCPtr(codec), codec);
  }

  public static void avcodec_register_all() {
    ffmpegJNI.avcodec_register_all();
  }

  public static AVCodecContext avcodec_alloc_context3(AVCodec codec) {
    long cPtr = ffmpegJNI.avcodec_alloc_context3(AVCodec.getCPtr(codec), codec);
    return (cPtr == 0) ? null : new AVCodecContext(cPtr, false);
  }

  public static int avcodec_get_context_defaults3(AVCodecContext s, AVCodec codec) {
    return ffmpegJNI.avcodec_get_context_defaults3(AVCodecContext.getCPtr(s), s, AVCodec.getCPtr(codec), codec);
  }

  public static AVClass avcodec_get_class() {
    long cPtr = ffmpegJNI.avcodec_get_class();
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static AVClass avcodec_get_frame_class() {
    long cPtr = ffmpegJNI.avcodec_get_frame_class();
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static AVClass avcodec_get_subtitle_rect_class() {
    long cPtr = ffmpegJNI.avcodec_get_subtitle_rect_class();
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static int avcodec_copy_context(AVCodecContext dest, AVCodecContext src) {
    return ffmpegJNI.avcodec_copy_context(AVCodecContext.getCPtr(dest), dest, AVCodecContext.getCPtr(src), src);
  }

  public static AVFrame avcodec_alloc_frame() {
    long cPtr = ffmpegJNI.avcodec_alloc_frame();
    return (cPtr == 0) ? null : new AVFrame(cPtr, false);
  }

  public static void avcodec_get_frame_defaults(AVFrame pic) {
    ffmpegJNI.avcodec_get_frame_defaults(AVFrame.getCPtr(pic), pic);
  }

  public static int avcodec_open2(AVCodecContext avctx, AVCodec codec, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avcodec_open2(AVCodecContext.getCPtr(avctx), avctx, AVCodec.getCPtr(codec), codec, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int avcodec_close(AVCodecContext avctx) {
    return ffmpegJNI.avcodec_close(AVCodecContext.getCPtr(avctx), avctx);
  }

  public static void avsubtitle_free(AVSubtitle sub) {
    ffmpegJNI.avsubtitle_free(AVSubtitle.getCPtr(sub), sub);
  }

  public static void av_destruct_packet_nofree(AVPacket pkt) {
    ffmpegJNI.av_destruct_packet_nofree(AVPacket.getCPtr(pkt), pkt);
  }

  public static void av_destruct_packet(AVPacket pkt) {
    ffmpegJNI.av_destruct_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static void av_init_packet(AVPacket pkt) {
    ffmpegJNI.av_init_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_new_packet(AVPacket pkt, int size) {
    return ffmpegJNI.av_new_packet(AVPacket.getCPtr(pkt), pkt, size);
  }

  public static void av_shrink_packet(AVPacket pkt, int size) {
    ffmpegJNI.av_shrink_packet(AVPacket.getCPtr(pkt), pkt, size);
  }

  public static int av_grow_packet(AVPacket pkt, int grow_by) {
    return ffmpegJNI.av_grow_packet(AVPacket.getCPtr(pkt), pkt, grow_by);
  }

  public static int av_dup_packet(AVPacket pkt) {
    return ffmpegJNI.av_dup_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static void av_free_packet(AVPacket pkt) {
    ffmpegJNI.av_free_packet(AVPacket.getCPtr(pkt), pkt);
  }

  public static SWIGTYPE_p_unsigned_char av_packet_new_side_data(AVPacket pkt, AVPacketSideDataType type, int size) {
    long cPtr = ffmpegJNI.av_packet_new_side_data(AVPacket.getCPtr(pkt), pkt, type.swigValue(), size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static int av_packet_shrink_side_data(AVPacket pkt, AVPacketSideDataType type, int size) {
    return ffmpegJNI.av_packet_shrink_side_data(AVPacket.getCPtr(pkt), pkt, type.swigValue(), size);
  }

  public static SWIGTYPE_p_unsigned_char av_packet_get_side_data(AVPacket pkt, AVPacketSideDataType type, SWIGTYPE_p_int size) {
    long cPtr = ffmpegJNI.av_packet_get_side_data(AVPacket.getCPtr(pkt), pkt, type.swigValue(), SWIGTYPE_p_int.getCPtr(size));
    return (cPtr == 0) ? null : new SWIGTYPE_p_unsigned_char(cPtr, false);
  }

  public static int av_packet_merge_side_data(AVPacket pkt) {
    return ffmpegJNI.av_packet_merge_side_data(AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_packet_split_side_data(AVPacket pkt) {
    return ffmpegJNI.av_packet_split_side_data(AVPacket.getCPtr(pkt), pkt);
  }

  public static AVCodec avcodec_find_decoder(CodecID id) {
    long cPtr = ffmpegJNI.avcodec_find_decoder(id.swigValue());
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static AVCodec avcodec_find_decoder_by_name(String name) {
    long cPtr = ffmpegJNI.avcodec_find_decoder_by_name(name);
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static int avcodec_default_get_buffer(AVCodecContext s, AVFrame pic) {
    return ffmpegJNI.avcodec_default_get_buffer(AVCodecContext.getCPtr(s), s, AVFrame.getCPtr(pic), pic);
  }

  public static void avcodec_default_release_buffer(AVCodecContext s, AVFrame pic) {
    ffmpegJNI.avcodec_default_release_buffer(AVCodecContext.getCPtr(s), s, AVFrame.getCPtr(pic), pic);
  }

  public static int avcodec_default_reget_buffer(AVCodecContext s, AVFrame pic) {
    return ffmpegJNI.avcodec_default_reget_buffer(AVCodecContext.getCPtr(s), s, AVFrame.getCPtr(pic), pic);
  }

  public static long avcodec_get_edge_width() {
    return ffmpegJNI.avcodec_get_edge_width();
  }

  public static void avcodec_align_dimensions(AVCodecContext s, SWIGTYPE_p_int width, SWIGTYPE_p_int height) {
    ffmpegJNI.avcodec_align_dimensions(AVCodecContext.getCPtr(s), s, SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height));
  }

  public static void avcodec_align_dimensions2(AVCodecContext s, SWIGTYPE_p_int width, SWIGTYPE_p_int height, SWIGTYPE_p_int linesize_align) {
    ffmpegJNI.avcodec_align_dimensions2(AVCodecContext.getCPtr(s), s, SWIGTYPE_p_int.getCPtr(width), SWIGTYPE_p_int.getCPtr(height), SWIGTYPE_p_int.getCPtr(linesize_align));
  }

  public static int avcodec_decode_audio3(AVCodecContext avctx, SWIGTYPE_p_short samples, SWIGTYPE_p_int frame_size_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_audio3(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_short.getCPtr(samples), SWIGTYPE_p_int.getCPtr(frame_size_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static int avcodec_decode_audio4(AVCodecContext avctx, AVFrame frame, SWIGTYPE_p_int got_frame_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_audio4(AVCodecContext.getCPtr(avctx), avctx, AVFrame.getCPtr(frame), frame, SWIGTYPE_p_int.getCPtr(got_frame_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static int avcodec_decode_video2(AVCodecContext avctx, AVFrame picture, SWIGTYPE_p_int got_picture_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_video2(AVCodecContext.getCPtr(avctx), avctx, AVFrame.getCPtr(picture), picture, SWIGTYPE_p_int.getCPtr(got_picture_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static int avcodec_decode_subtitle2(AVCodecContext avctx, AVSubtitle sub, SWIGTYPE_p_int got_sub_ptr, AVPacket avpkt) {
    return ffmpegJNI.avcodec_decode_subtitle2(AVCodecContext.getCPtr(avctx), avctx, AVSubtitle.getCPtr(sub), sub, SWIGTYPE_p_int.getCPtr(got_sub_ptr), AVPacket.getCPtr(avpkt), avpkt);
  }

  public static AVCodecParser av_parser_next(AVCodecParser c) {
    long cPtr = ffmpegJNI.av_parser_next(AVCodecParser.getCPtr(c), c);
    return (cPtr == 0) ? null : new AVCodecParser(cPtr, false);
  }

  public static void av_register_codec_parser(AVCodecParser parser) {
    ffmpegJNI.av_register_codec_parser(AVCodecParser.getCPtr(parser), parser);
  }

  public static AVCodecParserContext av_parser_init(int codec_id) {
    long cPtr = ffmpegJNI.av_parser_init(codec_id);
    return (cPtr == 0) ? null : new AVCodecParserContext(cPtr, false);
  }

  public static int av_parser_parse2(AVCodecParserContext s, AVCodecContext avctx, SWIGTYPE_p_p_unsigned_char poutbuf, SWIGTYPE_p_int poutbuf_size, SWIGTYPE_p_unsigned_char buf, int buf_size, long pts, long dts, long pos) {
    return ffmpegJNI.av_parser_parse2(AVCodecParserContext.getCPtr(s), s, AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_p_unsigned_char.getCPtr(poutbuf), SWIGTYPE_p_int.getCPtr(poutbuf_size), SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, pts, dts, pos);
  }

  public static int av_parser_change(AVCodecParserContext s, AVCodecContext avctx, SWIGTYPE_p_p_unsigned_char poutbuf, SWIGTYPE_p_int poutbuf_size, SWIGTYPE_p_unsigned_char buf, int buf_size, int keyframe) {
    return ffmpegJNI.av_parser_change(AVCodecParserContext.getCPtr(s), s, AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_p_unsigned_char.getCPtr(poutbuf), SWIGTYPE_p_int.getCPtr(poutbuf_size), SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, keyframe);
  }

  public static void av_parser_close(AVCodecParserContext s) {
    ffmpegJNI.av_parser_close(AVCodecParserContext.getCPtr(s), s);
  }

  public static AVCodec avcodec_find_encoder(CodecID id) {
    long cPtr = ffmpegJNI.avcodec_find_encoder(id.swigValue());
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static AVCodec avcodec_find_encoder_by_name(String name) {
    long cPtr = ffmpegJNI.avcodec_find_encoder_by_name(name);
    return (cPtr == 0) ? null : new AVCodec(cPtr, false);
  }

  public static int avcodec_encode_audio2(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, SWIGTYPE_p_int got_packet_ptr) {
    return ffmpegJNI.avcodec_encode_audio2(AVCodecContext.getCPtr(avctx), avctx, AVPacket.getCPtr(avpkt), avpkt, AVFrame.getCPtr(frame), frame, SWIGTYPE_p_int.getCPtr(got_packet_ptr));
  }

  public static int avcodec_encode_video(AVCodecContext avctx, SWIGTYPE_p_unsigned_char buf, int buf_size, AVFrame pict) {
    return ffmpegJNI.avcodec_encode_video(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, AVFrame.getCPtr(pict), pict);
  }

  public static int avcodec_encode_video2(AVCodecContext avctx, AVPacket avpkt, AVFrame frame, SWIGTYPE_p_int got_packet_ptr) {
    return ffmpegJNI.avcodec_encode_video2(AVCodecContext.getCPtr(avctx), avctx, AVPacket.getCPtr(avpkt), avpkt, AVFrame.getCPtr(frame), frame, SWIGTYPE_p_int.getCPtr(got_packet_ptr));
  }

  public static int avcodec_encode_subtitle(AVCodecContext avctx, SWIGTYPE_p_unsigned_char buf, int buf_size, AVSubtitle sub) {
    return ffmpegJNI.avcodec_encode_subtitle(AVCodecContext.getCPtr(avctx), avctx, SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, AVSubtitle.getCPtr(sub), sub);
  }

  public static SWIGTYPE_p_ReSampleContext av_audio_resample_init(int output_channels, int input_channels, int output_rate, int input_rate, AVSampleFormat sample_fmt_out, AVSampleFormat sample_fmt_in, int filter_length, int log2_phase_count, int linear, double cutoff) {
    long cPtr = ffmpegJNI.av_audio_resample_init(output_channels, input_channels, output_rate, input_rate, sample_fmt_out.swigValue(), sample_fmt_in.swigValue(), filter_length, log2_phase_count, linear, cutoff);
    return (cPtr == 0) ? null : new SWIGTYPE_p_ReSampleContext(cPtr, false);
  }

  public static int audio_resample(SWIGTYPE_p_ReSampleContext s, SWIGTYPE_p_short output, SWIGTYPE_p_short input, int nb_samples) {
    return ffmpegJNI.audio_resample(SWIGTYPE_p_ReSampleContext.getCPtr(s), SWIGTYPE_p_short.getCPtr(output), SWIGTYPE_p_short.getCPtr(input), nb_samples);
  }

  public static void audio_resample_close(SWIGTYPE_p_ReSampleContext s) {
    ffmpegJNI.audio_resample_close(SWIGTYPE_p_ReSampleContext.getCPtr(s));
  }

  public static SWIGTYPE_p_AVResampleContext av_resample_init(int out_rate, int in_rate, int filter_length, int log2_phase_count, int linear, double cutoff) {
    long cPtr = ffmpegJNI.av_resample_init(out_rate, in_rate, filter_length, log2_phase_count, linear, cutoff);
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVResampleContext(cPtr, false);
  }

  public static int av_resample(SWIGTYPE_p_AVResampleContext c, SWIGTYPE_p_short dst, SWIGTYPE_p_short src, SWIGTYPE_p_int consumed, int src_size, int dst_size, int update_ctx) {
    return ffmpegJNI.av_resample(SWIGTYPE_p_AVResampleContext.getCPtr(c), SWIGTYPE_p_short.getCPtr(dst), SWIGTYPE_p_short.getCPtr(src), SWIGTYPE_p_int.getCPtr(consumed), src_size, dst_size, update_ctx);
  }

  public static void av_resample_compensate(SWIGTYPE_p_AVResampleContext c, int sample_delta, int compensation_distance) {
    ffmpegJNI.av_resample_compensate(SWIGTYPE_p_AVResampleContext.getCPtr(c), sample_delta, compensation_distance);
  }

  public static void av_resample_close(SWIGTYPE_p_AVResampleContext c) {
    ffmpegJNI.av_resample_close(SWIGTYPE_p_AVResampleContext.getCPtr(c));
  }

  public static int avpicture_alloc(AVPicture picture, PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_alloc(AVPicture.getCPtr(picture), picture, pix_fmt.swigValue(), width, height);
  }

  public static void avpicture_free(AVPicture picture) {
    ffmpegJNI.avpicture_free(AVPicture.getCPtr(picture), picture);
  }

  public static int avpicture_fill(AVPicture picture, SWIGTYPE_p_unsigned_char ptr, PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_fill(AVPicture.getCPtr(picture), picture, SWIGTYPE_p_unsigned_char.getCPtr(ptr), pix_fmt.swigValue(), width, height);
  }

  public static int avpicture_layout(AVPicture src, PixelFormat pix_fmt, int width, int height, SWIGTYPE_p_unsigned_char dest, int dest_size) {
    return ffmpegJNI.avpicture_layout(AVPicture.getCPtr(src), src, pix_fmt.swigValue(), width, height, SWIGTYPE_p_unsigned_char.getCPtr(dest), dest_size);
  }

  public static int avpicture_get_size(PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_get_size(pix_fmt.swigValue(), width, height);
  }

  public static int avpicture_deinterlace(AVPicture dst, AVPicture src, PixelFormat pix_fmt, int width, int height) {
    return ffmpegJNI.avpicture_deinterlace(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, pix_fmt.swigValue(), width, height);
  }

  public static void av_picture_copy(AVPicture dst, AVPicture src, PixelFormat pix_fmt, int width, int height) {
    ffmpegJNI.av_picture_copy(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, pix_fmt.swigValue(), width, height);
  }

  public static int av_picture_crop(AVPicture dst, AVPicture src, PixelFormat pix_fmt, int top_band, int left_band) {
    return ffmpegJNI.av_picture_crop(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, pix_fmt.swigValue(), top_band, left_band);
  }

  public static int av_picture_pad(AVPicture dst, AVPicture src, int height, int width, PixelFormat pix_fmt, int padtop, int padbottom, int padleft, int padright, SWIGTYPE_p_int color) {
    return ffmpegJNI.av_picture_pad(AVPicture.getCPtr(dst), dst, AVPicture.getCPtr(src), src, height, width, pix_fmt.swigValue(), padtop, padbottom, padleft, padright, SWIGTYPE_p_int.getCPtr(color));
  }

  public static void avcodec_get_chroma_sub_sample(PixelFormat pix_fmt, SWIGTYPE_p_int h_shift, SWIGTYPE_p_int v_shift) {
    ffmpegJNI.avcodec_get_chroma_sub_sample(pix_fmt.swigValue(), SWIGTYPE_p_int.getCPtr(h_shift), SWIGTYPE_p_int.getCPtr(v_shift));
  }

  public static long avcodec_pix_fmt_to_codec_tag(PixelFormat pix_fmt) {
    return ffmpegJNI.avcodec_pix_fmt_to_codec_tag(pix_fmt.swigValue());
  }

  public static int avcodec_get_pix_fmt_loss(PixelFormat dst_pix_fmt, PixelFormat src_pix_fmt, int has_alpha) {
    return ffmpegJNI.avcodec_get_pix_fmt_loss(dst_pix_fmt.swigValue(), src_pix_fmt.swigValue(), has_alpha);
  }

  public static PixelFormat avcodec_find_best_pix_fmt(long pix_fmt_mask, PixelFormat src_pix_fmt, int has_alpha, SWIGTYPE_p_int loss_ptr) {
    return PixelFormat.swigToEnum(ffmpegJNI.avcodec_find_best_pix_fmt(pix_fmt_mask, src_pix_fmt.swigValue(), has_alpha, SWIGTYPE_p_int.getCPtr(loss_ptr)));
  }

  public static PixelFormat avcodec_find_best_pix_fmt2(PixelFormat dst_pix_fmt1, PixelFormat dst_pix_fmt2, PixelFormat src_pix_fmt, int has_alpha, SWIGTYPE_p_int loss_ptr) {
    return PixelFormat.swigToEnum(ffmpegJNI.avcodec_find_best_pix_fmt2(dst_pix_fmt1.swigValue(), dst_pix_fmt2.swigValue(), src_pix_fmt.swigValue(), has_alpha, SWIGTYPE_p_int.getCPtr(loss_ptr)));
  }

  public static PixelFormat avcodec_default_get_format(AVCodecContext s, SWIGTYPE_p_PixelFormat fmt) {
    return PixelFormat.swigToEnum(ffmpegJNI.avcodec_default_get_format(AVCodecContext.getCPtr(s), s, SWIGTYPE_p_PixelFormat.getCPtr(fmt)));
  }

  public static void avcodec_set_dimensions(AVCodecContext s, int width, int height) {
    ffmpegJNI.avcodec_set_dimensions(AVCodecContext.getCPtr(s), s, width, height);
  }

  public static long av_get_codec_tag_string(String buf, long buf_size, long codec_tag) {
    return ffmpegJNI.av_get_codec_tag_string(buf, buf_size, codec_tag);
  }

  public static void avcodec_string(String buf, int buf_size, AVCodecContext enc, int encode) {
    ffmpegJNI.avcodec_string(buf, buf_size, AVCodecContext.getCPtr(enc), enc, encode);
  }

  public static String av_get_profile_name(AVCodec codec, int profile) {
    return ffmpegJNI.av_get_profile_name(AVCodec.getCPtr(codec), codec, profile);
  }

  public static int avcodec_default_execute(AVCodecContext c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void__int func, long arg, SWIGTYPE_p_int ret, int count, int size) {
    return ffmpegJNI.avcodec_default_execute(AVCodecContext.getCPtr(c), c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void__int.getCPtr(func), arg, SWIGTYPE_p_int.getCPtr(ret), count, size);
  }

  public static int avcodec_default_execute2(AVCodecContext c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void_int_int__int func, long arg, SWIGTYPE_p_int ret, int count) {
    return ffmpegJNI.avcodec_default_execute2(AVCodecContext.getCPtr(c), c, SWIGTYPE_p_f_p_struct_AVCodecContext_p_void_int_int__int.getCPtr(func), arg, SWIGTYPE_p_int.getCPtr(ret), count);
  }

  public static int avcodec_fill_audio_frame(AVFrame frame, int nb_channels, AVSampleFormat sample_fmt, SWIGTYPE_p_unsigned_char buf, int buf_size, int align) {
    return ffmpegJNI.avcodec_fill_audio_frame(AVFrame.getCPtr(frame), frame, nb_channels, sample_fmt.swigValue(), SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, align);
  }

  public static void avcodec_flush_buffers(AVCodecContext avctx) {
    ffmpegJNI.avcodec_flush_buffers(AVCodecContext.getCPtr(avctx), avctx);
  }

  public static void avcodec_default_free_buffers(AVCodecContext s) {
    ffmpegJNI.avcodec_default_free_buffers(AVCodecContext.getCPtr(s), s);
  }

  public static int av_get_bits_per_sample(CodecID codec_id) {
    return ffmpegJNI.av_get_bits_per_sample(codec_id.swigValue());
  }

  public static CodecID av_get_pcm_codec(AVSampleFormat fmt, int be) {
    return CodecID.swigToEnum(ffmpegJNI.av_get_pcm_codec(fmt.swigValue(), be));
  }

  public static int av_get_exact_bits_per_sample(CodecID codec_id) {
    return ffmpegJNI.av_get_exact_bits_per_sample(codec_id.swigValue());
  }

  public static int av_get_audio_frame_duration(AVCodecContext avctx, int frame_bytes) {
    return ffmpegJNI.av_get_audio_frame_duration(AVCodecContext.getCPtr(avctx), avctx, frame_bytes);
  }

  public static void av_register_bitstream_filter(AVBitStreamFilter bsf) {
    ffmpegJNI.av_register_bitstream_filter(AVBitStreamFilter.getCPtr(bsf), bsf);
  }

  public static AVBitStreamFilterContext av_bitstream_filter_init(String name) {
    long cPtr = ffmpegJNI.av_bitstream_filter_init(name);
    return (cPtr == 0) ? null : new AVBitStreamFilterContext(cPtr, false);
  }

  public static int av_bitstream_filter_filter(AVBitStreamFilterContext bsfc, AVCodecContext avctx, String args, SWIGTYPE_p_p_unsigned_char poutbuf, SWIGTYPE_p_int poutbuf_size, SWIGTYPE_p_unsigned_char buf, int buf_size, int keyframe) {
    return ffmpegJNI.av_bitstream_filter_filter(AVBitStreamFilterContext.getCPtr(bsfc), bsfc, AVCodecContext.getCPtr(avctx), avctx, args, SWIGTYPE_p_p_unsigned_char.getCPtr(poutbuf), SWIGTYPE_p_int.getCPtr(poutbuf_size), SWIGTYPE_p_unsigned_char.getCPtr(buf), buf_size, keyframe);
  }

  public static void av_bitstream_filter_close(AVBitStreamFilterContext bsf) {
    ffmpegJNI.av_bitstream_filter_close(AVBitStreamFilterContext.getCPtr(bsf), bsf);
  }

  public static AVBitStreamFilter av_bitstream_filter_next(AVBitStreamFilter f) {
    long cPtr = ffmpegJNI.av_bitstream_filter_next(AVBitStreamFilter.getCPtr(f), f);
    return (cPtr == 0) ? null : new AVBitStreamFilter(cPtr, false);
  }

  public static long av_fast_realloc(long ptr, SWIGTYPE_p_unsigned_int size, long min_size) {
    return ffmpegJNI.av_fast_realloc(ptr, SWIGTYPE_p_unsigned_int.getCPtr(size), min_size);
  }

  public static void av_fast_malloc(long ptr, SWIGTYPE_p_unsigned_int size, long min_size) {
    ffmpegJNI.av_fast_malloc(ptr, SWIGTYPE_p_unsigned_int.getCPtr(size), min_size);
  }

  public static void av_fast_padded_malloc(long ptr, SWIGTYPE_p_unsigned_int size, long min_size) {
    ffmpegJNI.av_fast_padded_malloc(ptr, SWIGTYPE_p_unsigned_int.getCPtr(size), min_size);
  }

  public static long av_xiphlacing(SWIGTYPE_p_unsigned_char s, long v) {
    return ffmpegJNI.av_xiphlacing(SWIGTYPE_p_unsigned_char.getCPtr(s), v);
  }

  public static void av_log_missing_feature(long avc, String feature, int want_sample) {
    ffmpegJNI.av_log_missing_feature(avc, feature, want_sample);
  }

  public static void av_log_ask_for_sample(long avc, String msg) {
    ffmpegJNI.av_log_ask_for_sample(avc, msg);
  }

  public static void av_register_hwaccel(AVHWAccel hwaccel) {
    ffmpegJNI.av_register_hwaccel(AVHWAccel.getCPtr(hwaccel), hwaccel);
  }

  public static AVHWAccel av_hwaccel_next(AVHWAccel hwaccel) {
    long cPtr = ffmpegJNI.av_hwaccel_next(AVHWAccel.getCPtr(hwaccel), hwaccel);
    return (cPtr == 0) ? null : new AVHWAccel(cPtr, false);
  }

  public static int av_lockmgr_register(SWIGTYPE_p_f_p_p_void_enum_AVLockOp__int cb) {
    return ffmpegJNI.av_lockmgr_register(SWIGTYPE_p_f_p_p_void_enum_AVLockOp__int.getCPtr(cb));
  }

  public static AVMediaType avcodec_get_type(CodecID codec_id) {
    return AVMediaType.swigToEnum(ffmpegJNI.avcodec_get_type(codec_id.swigValue()));
  }

  public static String avcodec_get_name(CodecID id) {
    return ffmpegJNI.avcodec_get_name(id.swigValue());
  }

  public static int avcodec_is_open(AVCodecContext s) {
    return ffmpegJNI.avcodec_is_open(AVCodecContext.getCPtr(s), s);
  }

  public static int av_codec_is_encoder(AVCodec codec) {
    return ffmpegJNI.av_codec_is_encoder(AVCodec.getCPtr(codec), codec);
  }

  public static int av_codec_is_decoder(AVCodec codec) {
    return ffmpegJNI.av_codec_is_decoder(AVCodec.getCPtr(codec), codec);
  }

  public static int av_get_packet(AVIOContext s, AVPacket pkt, int size) {
    return ffmpegJNI.av_get_packet(AVIOContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt, size);
  }

  public static int av_append_packet(AVIOContext s, AVPacket pkt, int size) {
    return ffmpegJNI.av_append_packet(AVIOContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt, size);
  }

  public static long avformat_version() {
    return ffmpegJNI.avformat_version();
  }

  public static String avformat_configuration() {
    return ffmpegJNI.avformat_configuration();
  }

  public static String avformat_license() {
    return ffmpegJNI.avformat_license();
  }

  public static void av_register_all() {
    ffmpegJNI.av_register_all();
  }

  public static void av_register_input_format(AVInputFormat format) {
    ffmpegJNI.av_register_input_format(AVInputFormat.getCPtr(format), format);
  }

  public static void av_register_output_format(AVOutputFormat format) {
    ffmpegJNI.av_register_output_format(AVOutputFormat.getCPtr(format), format);
  }

  public static int avformat_network_init() {
    return ffmpegJNI.avformat_network_init();
  }

  public static int avformat_network_deinit() {
    return ffmpegJNI.avformat_network_deinit();
  }

  public static AVInputFormat av_iformat_next(AVInputFormat f) {
    long cPtr = ffmpegJNI.av_iformat_next(AVInputFormat.getCPtr(f), f);
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVOutputFormat av_oformat_next(AVOutputFormat f) {
    long cPtr = ffmpegJNI.av_oformat_next(AVOutputFormat.getCPtr(f), f);
    return (cPtr == 0) ? null : new AVOutputFormat(cPtr, false);
  }

  public static AVFormatContext avformat_alloc_context() {
    long cPtr = ffmpegJNI.avformat_alloc_context();
    return (cPtr == 0) ? null : new AVFormatContext(cPtr, false);
  }

  public static void avformat_free_context(AVFormatContext s) {
    ffmpegJNI.avformat_free_context(AVFormatContext.getCPtr(s), s);
  }

  public static AVClass avformat_get_class() {
    long cPtr = ffmpegJNI.avformat_get_class();
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static AVStream avformat_new_stream(AVFormatContext s, AVCodec c) {
    long cPtr = ffmpegJNI.avformat_new_stream(AVFormatContext.getCPtr(s), s, AVCodec.getCPtr(c), c);
    return (cPtr == 0) ? null : new AVStream(cPtr, false);
  }

  public static AVProgram av_new_program(AVFormatContext s, int id) {
    long cPtr = ffmpegJNI.av_new_program(AVFormatContext.getCPtr(s), s, id);
    return (cPtr == 0) ? null : new AVProgram(cPtr, false);
  }

  public static int avformat_alloc_output_context2(SWIGTYPE_p_p_AVFormatContext ctx, AVOutputFormat oformat, String format_name, String filename) {
    return ffmpegJNI.avformat_alloc_output_context2(SWIGTYPE_p_p_AVFormatContext.getCPtr(ctx), AVOutputFormat.getCPtr(oformat), oformat, format_name, filename);
  }

  public static AVInputFormat av_find_input_format(String short_name) {
    long cPtr = ffmpegJNI.av_find_input_format(short_name);
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVInputFormat av_probe_input_format(AVProbeData pd, int is_opened) {
    long cPtr = ffmpegJNI.av_probe_input_format(AVProbeData.getCPtr(pd), pd, is_opened);
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVInputFormat av_probe_input_format2(AVProbeData pd, int is_opened, SWIGTYPE_p_int score_max) {
    long cPtr = ffmpegJNI.av_probe_input_format2(AVProbeData.getCPtr(pd), pd, is_opened, SWIGTYPE_p_int.getCPtr(score_max));
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static AVInputFormat av_probe_input_format3(AVProbeData pd, int is_opened, SWIGTYPE_p_int score_ret) {
    long cPtr = ffmpegJNI.av_probe_input_format3(AVProbeData.getCPtr(pd), pd, is_opened, SWIGTYPE_p_int.getCPtr(score_ret));
    return (cPtr == 0) ? null : new AVInputFormat(cPtr, false);
  }

  public static int av_probe_input_buffer(AVIOContext pb, SWIGTYPE_p_p_AVInputFormat fmt, String filename, long logctx, long offset, long max_probe_size) {
    return ffmpegJNI.av_probe_input_buffer(AVIOContext.getCPtr(pb), pb, SWIGTYPE_p_p_AVInputFormat.getCPtr(fmt), filename, logctx, offset, max_probe_size);
  }

  public static int avformat_open_input(SWIGTYPE_p_p_AVFormatContext ps, String filename, AVInputFormat fmt, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avformat_open_input(SWIGTYPE_p_p_AVFormatContext.getCPtr(ps), filename, AVInputFormat.getCPtr(fmt), fmt, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int av_demuxer_open(AVFormatContext ic) {
    return ffmpegJNI.av_demuxer_open(AVFormatContext.getCPtr(ic), ic);
  }

  public static int avformat_find_stream_info(AVFormatContext ic, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avformat_find_stream_info(AVFormatContext.getCPtr(ic), ic, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static AVProgram av_find_program_from_stream(AVFormatContext ic, AVProgram last, int s) {
    long cPtr = ffmpegJNI.av_find_program_from_stream(AVFormatContext.getCPtr(ic), ic, AVProgram.getCPtr(last), last, s);
    return (cPtr == 0) ? null : new AVProgram(cPtr, false);
  }

  public static int av_find_best_stream(AVFormatContext ic, AVMediaType type, int wanted_stream_nb, int related_stream, SWIGTYPE_p_p_AVCodec decoder_ret, int flags) {
    return ffmpegJNI.av_find_best_stream(AVFormatContext.getCPtr(ic), ic, type.swigValue(), wanted_stream_nb, related_stream, SWIGTYPE_p_p_AVCodec.getCPtr(decoder_ret), flags);
  }

  public static int av_read_frame(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_read_frame(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_seek_frame(AVFormatContext s, int stream_index, long timestamp, int flags) {
    return ffmpegJNI.av_seek_frame(AVFormatContext.getCPtr(s), s, stream_index, timestamp, flags);
  }

  public static int avformat_seek_file(AVFormatContext s, int stream_index, long min_ts, long ts, long max_ts, int flags) {
    return ffmpegJNI.avformat_seek_file(AVFormatContext.getCPtr(s), s, stream_index, min_ts, ts, max_ts, flags);
  }

  public static int av_read_play(AVFormatContext s) {
    return ffmpegJNI.av_read_play(AVFormatContext.getCPtr(s), s);
  }

  public static int av_read_pause(AVFormatContext s) {
    return ffmpegJNI.av_read_pause(AVFormatContext.getCPtr(s), s);
  }

  public static void avformat_close_input(SWIGTYPE_p_p_AVFormatContext s) {
    ffmpegJNI.avformat_close_input(SWIGTYPE_p_p_AVFormatContext.getCPtr(s));
  }

  public static int avformat_write_header(AVFormatContext s, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avformat_write_header(AVFormatContext.getCPtr(s), s, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int av_write_frame(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_write_frame(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_interleaved_write_frame(AVFormatContext s, AVPacket pkt) {
    return ffmpegJNI.av_interleaved_write_frame(AVFormatContext.getCPtr(s), s, AVPacket.getCPtr(pkt), pkt);
  }

  public static int av_write_trailer(AVFormatContext s) {
    return ffmpegJNI.av_write_trailer(AVFormatContext.getCPtr(s), s);
  }

  public static AVOutputFormat av_guess_format(String short_name, String filename, String mime_type) {
    long cPtr = ffmpegJNI.av_guess_format(short_name, filename, mime_type);
    return (cPtr == 0) ? null : new AVOutputFormat(cPtr, false);
  }

  public static CodecID av_guess_codec(AVOutputFormat fmt, String short_name, String filename, String mime_type, AVMediaType type) {
    return CodecID.swigToEnum(ffmpegJNI.av_guess_codec(AVOutputFormat.getCPtr(fmt), fmt, short_name, filename, mime_type, type.swigValue()));
  }

  public static int av_get_output_timestamp(AVFormatContext s, int stream, SWIGTYPE_p_long_long dts, SWIGTYPE_p_long_long wall) {
    return ffmpegJNI.av_get_output_timestamp(AVFormatContext.getCPtr(s), s, stream, SWIGTYPE_p_long_long.getCPtr(dts), SWIGTYPE_p_long_long.getCPtr(wall));
  }

  public static void av_hex_dump(SWIGTYPE_p_FILE f, SWIGTYPE_p_unsigned_char buf, int size) {
    ffmpegJNI.av_hex_dump(SWIGTYPE_p_FILE.getCPtr(f), SWIGTYPE_p_unsigned_char.getCPtr(buf), size);
  }

  public static void av_hex_dump_log(long avcl, int level, SWIGTYPE_p_unsigned_char buf, int size) {
    ffmpegJNI.av_hex_dump_log(avcl, level, SWIGTYPE_p_unsigned_char.getCPtr(buf), size);
  }

  public static void av_pkt_dump2(SWIGTYPE_p_FILE f, AVPacket pkt, int dump_payload, AVStream st) {
    ffmpegJNI.av_pkt_dump2(SWIGTYPE_p_FILE.getCPtr(f), AVPacket.getCPtr(pkt), pkt, dump_payload, AVStream.getCPtr(st), st);
  }

  public static void av_pkt_dump_log2(long avcl, int level, AVPacket pkt, int dump_payload, AVStream st) {
    ffmpegJNI.av_pkt_dump_log2(avcl, level, AVPacket.getCPtr(pkt), pkt, dump_payload, AVStream.getCPtr(st), st);
  }

  public static CodecID av_codec_get_id(SWIGTYPE_p_p_AVCodecTag tags, long tag) {
    return CodecID.swigToEnum(ffmpegJNI.av_codec_get_id(SWIGTYPE_p_p_AVCodecTag.getCPtr(tags), tag));
  }

  public static long av_codec_get_tag(SWIGTYPE_p_p_AVCodecTag tags, CodecID id) {
    return ffmpegJNI.av_codec_get_tag(SWIGTYPE_p_p_AVCodecTag.getCPtr(tags), id.swigValue());
  }

  public static int av_find_default_stream_index(AVFormatContext s) {
    return ffmpegJNI.av_find_default_stream_index(AVFormatContext.getCPtr(s), s);
  }

  public static int av_index_search_timestamp(AVStream st, long timestamp, int flags) {
    return ffmpegJNI.av_index_search_timestamp(AVStream.getCPtr(st), st, timestamp, flags);
  }

  public static int av_add_index_entry(AVStream st, long pos, long timestamp, int size, int distance, int flags) {
    return ffmpegJNI.av_add_index_entry(AVStream.getCPtr(st), st, pos, timestamp, size, distance, flags);
  }

  public static void av_url_split(String proto, int proto_size, String authorization, int authorization_size, String hostname, int hostname_size, SWIGTYPE_p_int port_ptr, String path, int path_size, String url) {
    ffmpegJNI.av_url_split(proto, proto_size, authorization, authorization_size, hostname, hostname_size, SWIGTYPE_p_int.getCPtr(port_ptr), path, path_size, url);
  }

  public static void av_dump_format(AVFormatContext ic, int index, String url, int is_output) {
    ffmpegJNI.av_dump_format(AVFormatContext.getCPtr(ic), ic, index, url, is_output);
  }

  public static long av_gettime() {
    return ffmpegJNI.av_gettime();
  }

  public static int av_get_frame_filename(String buf, int buf_size, String path, int number) {
    return ffmpegJNI.av_get_frame_filename(buf, buf_size, path, number);
  }

  public static int av_filename_number_test(String filename) {
    return ffmpegJNI.av_filename_number_test(filename);
  }

  public static int av_sdp_create(SWIGTYPE_p_p_AVFormatContext ac, int n_files, String buf, int size) {
    return ffmpegJNI.av_sdp_create(SWIGTYPE_p_p_AVFormatContext.getCPtr(ac), n_files, buf, size);
  }

  public static int av_match_ext(String filename, String extensions) {
    return ffmpegJNI.av_match_ext(filename, extensions);
  }

  public static int avformat_query_codec(AVOutputFormat ofmt, CodecID codec_id, int std_compliance) {
    return ffmpegJNI.avformat_query_codec(AVOutputFormat.getCPtr(ofmt), ofmt, codec_id.swigValue(), std_compliance);
  }

  public static SWIGTYPE_p_AVCodecTag avformat_get_riff_video_tags() {
    long cPtr = ffmpegJNI.avformat_get_riff_video_tags();
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVCodecTag(cPtr, false);
  }

  public static SWIGTYPE_p_AVCodecTag avformat_get_riff_audio_tags() {
    long cPtr = ffmpegJNI.avformat_get_riff_audio_tags();
    return (cPtr == 0) ? null : new SWIGTYPE_p_AVCodecTag(cPtr, false);
  }

  public static AVRational av_guess_sample_aspect_ratio(AVFormatContext format, AVStream stream, AVFrame frame) {
    return new AVRational(ffmpegJNI.av_guess_sample_aspect_ratio(AVFormatContext.getCPtr(format), format, AVStream.getCPtr(stream), stream, AVFrame.getCPtr(frame), frame), true);
  }

  public static int avio_check(String url, int flags) {
    return ffmpegJNI.avio_check(url, flags);
  }

  public static AVIOContext avio_alloc_context(SWIGTYPE_p_unsigned_char buffer, int buffer_size, int write_flag, long opaque, SWIGTYPE_p_f_p_void_p_unsigned_char_int__int read_packet, SWIGTYPE_p_f_p_void_p_unsigned_char_int__int write_packet, SWIGTYPE_p_f_p_void_long_long_int__long_long seek) {
    long cPtr = ffmpegJNI.avio_alloc_context(SWIGTYPE_p_unsigned_char.getCPtr(buffer), buffer_size, write_flag, opaque, SWIGTYPE_p_f_p_void_p_unsigned_char_int__int.getCPtr(read_packet), SWIGTYPE_p_f_p_void_p_unsigned_char_int__int.getCPtr(write_packet), SWIGTYPE_p_f_p_void_long_long_int__long_long.getCPtr(seek));
    return (cPtr == 0) ? null : new AVIOContext(cPtr, false);
  }

  public static void avio_w8(AVIOContext s, int b) {
    ffmpegJNI.avio_w8(AVIOContext.getCPtr(s), s, b);
  }

  public static void avio_write(AVIOContext s, SWIGTYPE_p_unsigned_char buf, int size) {
    ffmpegJNI.avio_write(AVIOContext.getCPtr(s), s, SWIGTYPE_p_unsigned_char.getCPtr(buf), size);
  }

  public static void avio_wl64(AVIOContext s, java.math.BigInteger val) {
    ffmpegJNI.avio_wl64(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wb64(AVIOContext s, java.math.BigInteger val) {
    ffmpegJNI.avio_wb64(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wl32(AVIOContext s, long val) {
    ffmpegJNI.avio_wl32(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wb32(AVIOContext s, long val) {
    ffmpegJNI.avio_wb32(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wl24(AVIOContext s, long val) {
    ffmpegJNI.avio_wl24(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wb24(AVIOContext s, long val) {
    ffmpegJNI.avio_wb24(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wl16(AVIOContext s, long val) {
    ffmpegJNI.avio_wl16(AVIOContext.getCPtr(s), s, val);
  }

  public static void avio_wb16(AVIOContext s, long val) {
    ffmpegJNI.avio_wb16(AVIOContext.getCPtr(s), s, val);
  }

  public static int avio_put_str(AVIOContext s, String str) {
    return ffmpegJNI.avio_put_str(AVIOContext.getCPtr(s), s, str);
  }

  public static int avio_put_str16le(AVIOContext s, String str) {
    return ffmpegJNI.avio_put_str16le(AVIOContext.getCPtr(s), s, str);
  }

  public static long avio_seek(AVIOContext s, long offset, int whence) {
    return ffmpegJNI.avio_seek(AVIOContext.getCPtr(s), s, offset, whence);
  }

  public static long avio_skip(AVIOContext s, long offset) {
    return ffmpegJNI.avio_skip(AVIOContext.getCPtr(s), s, offset);
  }

  public static long avio_tell(AVIOContext s) {
    return ffmpegJNI.avio_tell(AVIOContext.getCPtr(s), s);
  }

  public static long avio_size(AVIOContext s) {
    return ffmpegJNI.avio_size(AVIOContext.getCPtr(s), s);
  }

  public static int url_feof(AVIOContext s) {
    return ffmpegJNI.url_feof(AVIOContext.getCPtr(s), s);
  }

  public static int avio_printf(AVIOContext s, String fmt) {
    return ffmpegJNI.avio_printf(AVIOContext.getCPtr(s), s, fmt);
  }

  public static void avio_flush(AVIOContext s) {
    ffmpegJNI.avio_flush(AVIOContext.getCPtr(s), s);
  }

  public static int avio_read(AVIOContext s, SWIGTYPE_p_unsigned_char buf, int size) {
    return ffmpegJNI.avio_read(AVIOContext.getCPtr(s), s, SWIGTYPE_p_unsigned_char.getCPtr(buf), size);
  }

  public static int avio_r8(AVIOContext s) {
    return ffmpegJNI.avio_r8(AVIOContext.getCPtr(s), s);
  }

  public static long avio_rl16(AVIOContext s) {
    return ffmpegJNI.avio_rl16(AVIOContext.getCPtr(s), s);
  }

  public static long avio_rl24(AVIOContext s) {
    return ffmpegJNI.avio_rl24(AVIOContext.getCPtr(s), s);
  }

  public static long avio_rl32(AVIOContext s) {
    return ffmpegJNI.avio_rl32(AVIOContext.getCPtr(s), s);
  }

  public static java.math.BigInteger avio_rl64(AVIOContext s) {
    return ffmpegJNI.avio_rl64(AVIOContext.getCPtr(s), s);
  }

  public static long avio_rb16(AVIOContext s) {
    return ffmpegJNI.avio_rb16(AVIOContext.getCPtr(s), s);
  }

  public static long avio_rb24(AVIOContext s) {
    return ffmpegJNI.avio_rb24(AVIOContext.getCPtr(s), s);
  }

  public static long avio_rb32(AVIOContext s) {
    return ffmpegJNI.avio_rb32(AVIOContext.getCPtr(s), s);
  }

  public static java.math.BigInteger avio_rb64(AVIOContext s) {
    return ffmpegJNI.avio_rb64(AVIOContext.getCPtr(s), s);
  }

  public static int avio_get_str(AVIOContext pb, int maxlen, String buf, int buflen) {
    return ffmpegJNI.avio_get_str(AVIOContext.getCPtr(pb), pb, maxlen, buf, buflen);
  }

  public static int avio_get_str16le(AVIOContext pb, int maxlen, String buf, int buflen) {
    return ffmpegJNI.avio_get_str16le(AVIOContext.getCPtr(pb), pb, maxlen, buf, buflen);
  }

  public static int avio_get_str16be(AVIOContext pb, int maxlen, String buf, int buflen) {
    return ffmpegJNI.avio_get_str16be(AVIOContext.getCPtr(pb), pb, maxlen, buf, buflen);
  }

  public static int avio_open(SWIGTYPE_p_p_AVIOContext s, String url, int flags) {
    return ffmpegJNI.avio_open(SWIGTYPE_p_p_AVIOContext.getCPtr(s), url, flags);
  }

  public static int avio_open2(SWIGTYPE_p_p_AVIOContext s, String url, int flags, AVIOInterruptCB int_cb, SWIGTYPE_p_p_AVDictionary options) {
    return ffmpegJNI.avio_open2(SWIGTYPE_p_p_AVIOContext.getCPtr(s), url, flags, AVIOInterruptCB.getCPtr(int_cb), int_cb, SWIGTYPE_p_p_AVDictionary.getCPtr(options));
  }

  public static int avio_close(AVIOContext s) {
    return ffmpegJNI.avio_close(AVIOContext.getCPtr(s), s);
  }

  public static int avio_open_dyn_buf(SWIGTYPE_p_p_AVIOContext s) {
    return ffmpegJNI.avio_open_dyn_buf(SWIGTYPE_p_p_AVIOContext.getCPtr(s));
  }

  public static int avio_close_dyn_buf(AVIOContext s, SWIGTYPE_p_p_unsigned_char pbuffer) {
    return ffmpegJNI.avio_close_dyn_buf(AVIOContext.getCPtr(s), s, SWIGTYPE_p_p_unsigned_char.getCPtr(pbuffer));
  }

  public static String avio_enum_protocols(SWIGTYPE_p_p_void opaque, int output) {
    return ffmpegJNI.avio_enum_protocols(SWIGTYPE_p_p_void.getCPtr(opaque), output);
  }

  public static int avio_pause(AVIOContext h, int pause) {
    return ffmpegJNI.avio_pause(AVIOContext.getCPtr(h), h, pause);
  }

  public static long avio_seek_time(AVIOContext h, int stream_index, long timestamp, int flags) {
    return ffmpegJNI.avio_seek_time(AVIOContext.getCPtr(h), h, stream_index, timestamp, flags);
  }

  public static AVClass swr_get_class() {
    long cPtr = ffmpegJNI.swr_get_class();
    return (cPtr == 0) ? null : new AVClass(cPtr, false);
  }

  public static SWIGTYPE_p_SwrContext swr_alloc() {
    long cPtr = ffmpegJNI.swr_alloc();
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwrContext(cPtr, false);
  }

  public static int swr_init(SWIGTYPE_p_SwrContext s) {
    return ffmpegJNI.swr_init(SWIGTYPE_p_SwrContext.getCPtr(s));
  }

  public static SWIGTYPE_p_SwrContext swr_alloc_set_opts(SWIGTYPE_p_SwrContext s, long out_ch_layout, AVSampleFormat out_sample_fmt, int out_sample_rate, long in_ch_layout, AVSampleFormat in_sample_fmt, int in_sample_rate, int log_offset, long log_ctx) {
    long cPtr = ffmpegJNI.swr_alloc_set_opts(SWIGTYPE_p_SwrContext.getCPtr(s), out_ch_layout, out_sample_fmt.swigValue(), out_sample_rate, in_ch_layout, in_sample_fmt.swigValue(), in_sample_rate, log_offset, log_ctx);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SwrContext(cPtr, false);
  }

  public static void swr_free(SWIGTYPE_p_p_SwrContext s) {
    ffmpegJNI.swr_free(SWIGTYPE_p_p_SwrContext.getCPtr(s));
  }

  public static int swr_convert(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_p_unsigned_char out, int out_count, SWIGTYPE_p_p_unsigned_char in, int in_count) {
    return ffmpegJNI.swr_convert(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_p_unsigned_char.getCPtr(out), out_count, SWIGTYPE_p_p_unsigned_char.getCPtr(in), in_count);
  }

  public static long swr_next_pts(SWIGTYPE_p_SwrContext s, long pts) {
    return ffmpegJNI.swr_next_pts(SWIGTYPE_p_SwrContext.getCPtr(s), pts);
  }

  public static int swr_set_compensation(SWIGTYPE_p_SwrContext s, int sample_delta, int compensation_distance) {
    return ffmpegJNI.swr_set_compensation(SWIGTYPE_p_SwrContext.getCPtr(s), sample_delta, compensation_distance);
  }

  public static int swr_set_channel_mapping(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_int channel_map) {
    return ffmpegJNI.swr_set_channel_mapping(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_int.getCPtr(channel_map));
  }

  public static int swr_set_matrix(SWIGTYPE_p_SwrContext s, SWIGTYPE_p_double matrix, int stride) {
    return ffmpegJNI.swr_set_matrix(SWIGTYPE_p_SwrContext.getCPtr(s), SWIGTYPE_p_double.getCPtr(matrix), stride);
  }

  public static int swr_drop_output(SWIGTYPE_p_SwrContext s, int count) {
    return ffmpegJNI.swr_drop_output(SWIGTYPE_p_SwrContext.getCPtr(s), count);
  }

  public static int swr_inject_silence(SWIGTYPE_p_SwrContext s, int count) {
    return ffmpegJNI.swr_inject_silence(SWIGTYPE_p_SwrContext.getCPtr(s), count);
  }

  public static long swr_get_delay(SWIGTYPE_p_SwrContext s, long base) {
    return ffmpegJNI.swr_get_delay(SWIGTYPE_p_SwrContext.getCPtr(s), base);
  }

  public static long swresample_version() {
    return ffmpegJNI.swresample_version();
  }

  public static String swresample_configuration() {
    return ffmpegJNI.swresample_configuration();
  }

  public static String swresample_license() {
    return ffmpegJNI.swresample_license();
  }

}
