/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.pluggedin.ffmpeg;

public class AVFilterBufferRef {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected AVFilterBufferRef(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(AVFilterBufferRef obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ffmpegJNI.delete_AVFilterBufferRef(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setBuf(AVFilterBuffer value) {
    ffmpegJNI.AVFilterBufferRef_buf_set(swigCPtr, this, AVFilterBuffer.getCPtr(value), value);
  }

  public AVFilterBuffer getBuf() {
    long cPtr = ffmpegJNI.AVFilterBufferRef_buf_get(swigCPtr, this);
    return (cPtr == 0) ? null : new AVFilterBuffer(cPtr, false);
  }

  public void setData(SWIGTYPE_p_p_uint8_t value) {
    ffmpegJNI.AVFilterBufferRef_data_set(swigCPtr, this, SWIGTYPE_p_p_uint8_t.getCPtr(value));
  }

  public SWIGTYPE_p_p_uint8_t getData() {
    long cPtr = ffmpegJNI.AVFilterBufferRef_data_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_p_uint8_t(cPtr, false);
  }

  public void setLinesize(SWIGTYPE_p_int value) {
    ffmpegJNI.AVFilterBufferRef_linesize_set(swigCPtr, this, SWIGTYPE_p_int.getCPtr(value));
  }

  public SWIGTYPE_p_int getLinesize() {
    long cPtr = ffmpegJNI.AVFilterBufferRef_linesize_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_int(cPtr, false);
  }

  public void setFormat(int value) {
    ffmpegJNI.AVFilterBufferRef_format_set(swigCPtr, this, value);
  }

  public int getFormat() {
    return ffmpegJNI.AVFilterBufferRef_format_get(swigCPtr, this);
  }

  public void setPts(SWIGTYPE_p_int64_t value) {
    ffmpegJNI.AVFilterBufferRef_pts_set(swigCPtr, this, SWIGTYPE_p_int64_t.getCPtr(value));
  }

  public SWIGTYPE_p_int64_t getPts() {
    return new SWIGTYPE_p_int64_t(ffmpegJNI.AVFilterBufferRef_pts_get(swigCPtr, this), true);
  }

  public void setPos(SWIGTYPE_p_int64_t value) {
    ffmpegJNI.AVFilterBufferRef_pos_set(swigCPtr, this, SWIGTYPE_p_int64_t.getCPtr(value));
  }

  public SWIGTYPE_p_int64_t getPos() {
    return new SWIGTYPE_p_int64_t(ffmpegJNI.AVFilterBufferRef_pos_get(swigCPtr, this), true);
  }

  public void setPerms(int value) {
    ffmpegJNI.AVFilterBufferRef_perms_set(swigCPtr, this, value);
  }

  public int getPerms() {
    return ffmpegJNI.AVFilterBufferRef_perms_get(swigCPtr, this);
  }

  public void setType(AVMediaType value) {
    ffmpegJNI.AVFilterBufferRef_type_set(swigCPtr, this, value.swigValue());
  }

  public AVMediaType getType() {
    return AVMediaType.swigToEnum(ffmpegJNI.AVFilterBufferRef_type_get(swigCPtr, this));
  }

  public void setVideo(AVFilterBufferRefVideoProps value) {
    ffmpegJNI.AVFilterBufferRef_video_set(swigCPtr, this, AVFilterBufferRefVideoProps.getCPtr(value), value);
  }

  public AVFilterBufferRefVideoProps getVideo() {
    long cPtr = ffmpegJNI.AVFilterBufferRef_video_get(swigCPtr, this);
    return (cPtr == 0) ? null : new AVFilterBufferRefVideoProps(cPtr, false);
  }

  public void setAudio(AVFilterBufferRefAudioProps value) {
    ffmpegJNI.AVFilterBufferRef_audio_set(swigCPtr, this, AVFilterBufferRefAudioProps.getCPtr(value), value);
  }

  public AVFilterBufferRefAudioProps getAudio() {
    long cPtr = ffmpegJNI.AVFilterBufferRef_audio_get(swigCPtr, this);
    return (cPtr == 0) ? null : new AVFilterBufferRefAudioProps(cPtr, false);
  }

  public AVFilterBufferRef() {
    this(ffmpegJNI.new_AVFilterBufferRef(), true);
  }

}
